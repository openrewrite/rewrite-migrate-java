# Copyright 2025 the original author or authors.
# <p>
# Licensed under the Moderne Source Available License (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# <p>
# https://docs.moderne.io/licensing/moderne-source-available-license
# <p>
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.jspecify.MigrateToJspecify
examples:
- description: ''
  sources:
  - before: |
      @ParametersAreNonnullByDefault
      package org.openrewrite.example;

      import javax.annotation.ParametersAreNonnullByDefault;
    after: |
      @NullMarked
      package org.openrewrite.example;

      import org.jspecify.annotations.NullMarked;
    language: java
  - before: |
      import javax.annotation.Nonnull;
      import javax.annotation.Nullable;

      public class Test {
          @Nonnull
          public String field1;
          @Nullable
          public String field2;
          @Nullable
          public Foo.Bar foobar;
      }

      interface Foo {
        class Bar {
          @Nonnull
          public String barField;
        }
      }
    after: |
      import org.jspecify.annotations.NonNull;
      import org.jspecify.annotations.Nullable;

      public class Test {
          @NonNull
          public String field1;
          @Nullable
          public String field2;

          public Foo.@Nullable Bar foobar;
      }

      interface Foo {
        class Bar {
          @NonNull
          public String barField;
        }
      }
    language: java
  - before: foo
    language: mavenProject
  - before: |
      <project>
          <modelVersion>4.0.0</modelVersion>
          <groupId>com.example.foobar</groupId>
          <artifactId>foobar-core</artifactId>
          <version>1.0.0</version>
          <dependencies>
              <dependency>
                  <groupId>javax.annotation</groupId>
                  <artifactId>javax.annotation-api</artifactId>
                  <version>1.3.2</version>
              </dependency>
          </dependencies>
      </project>
    after: |
      <project>
          <modelVersion>4.0.0</modelVersion>
          <groupId>com.example.foobar</groupId>
          <artifactId>foobar-core</artifactId>
          <version>1.0.0</version>
          <dependencies>
              <dependency>
                  <groupId>javax.annotation</groupId>
                  <artifactId>javax.annotation-api</artifactId>
                  <version>1.3.2</version>
              </dependency>
              <dependency>
                  <groupId>org.jspecify</groupId>
                  <artifactId>jspecify</artifactId>
                  <version>1.0.0</version>
              </dependency>
          </dependencies>
      </project>
    path: pom.xml
    language: xml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.AddMissingMethodImplementation
examples:
- description: ''
  parameters:
  - I1
  - '*..* m1()'
  - public void m1() { System.out.println("m1"); }
  sources:
  - before: |
      interface I1 {}
      class C2 implements I1 {}
    after: |
      interface I1 {}
      class C2 implements I1 {
          public void m1() {
              System.out.println("m1");
          }}
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.ArrayStoreExceptionToTypeNotPresentException
examples:
- description: ''
  sources:
  - before: |
      import java.lang.annotation.*;
      import java.util.*;

      public class Test {
          public void testMethod() {
              try {
                  Object o = "test";
                  o.getClass().getAnnotation(Override.class);
              } catch (ArrayStoreException e) {
                  System.out.println("Caught Exception");
              }
              try {
                  Object.class.getAnnotation(Override.class);
              } catch (ArrayStoreException e) {
                  System.out.println("Caught ArrayStoreException");
              }
          }
      }
    after: |
      import java.lang.annotation.*;
      import java.util.*;

      public class Test {
          public void testMethod() {
              try {
                  Object o = "test";
                  o.getClass().getAnnotation(Override.class);
              } catch (TypeNotPresentException e) {
                  System.out.println("Caught Exception");
              }
              try {
                  Object.class.getAnnotation(Override.class);
              } catch (TypeNotPresentException e) {
                  System.out.println("Caught ArrayStoreException");
              }
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.BeanDiscovery
examples:
- description: ''
  sources:
  - before: |
      <?xml version="1.0" encoding="UTF-8"?>
      <beans xmlns="https://jakarta.ee/xml/ns/jakartaee"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/beans_3_0.xsd">
      </beans>
    after: |
      <?xml version="1.0" encoding="UTF-8"?>
      <beans xmlns="https://jakarta.ee/xml/ns/jakartaee"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/beans_3_0.xsd" bean-discovery-mode="all" version="3.0">
      </beans>
    language: xml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.BeansXmlNamespace
examples:
- description: ''
  sources:
  - before: |
      <?xml version="1.0" encoding="UTF-8"?>
      <beans xmlns="http://java.sun.com/xml/ns/javaee"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="https://jakarta.ee/xml/ns/jakarXXtaee https://jakarta.ee/xml/ns/jakartaee/beans111_3_0.xsd">
      </beans>
    after: |
      <?xml version="1.0" encoding="UTF-8"?>
      <beans xmlns="http://java.sun.com/xml/ns/javaee"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/beans_1_0.xsd">
      </beans>
    language: xml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.BounceCastleFromJdk15OntoJdk18On
examples:
- description: ''
  sources:
  - before: project
    language: mavenProject
  - before: |
      <project>
        <modelVersion>4.0.0</modelVersion>

        <groupId>com.mycompany.app</groupId>
        <artifactId>my-app</artifactId>
        <version>1</version>

        <dependencies>
          <dependency>
            <groupId>org.bouncycastle</groupId>
            <artifactId>bcprov-jdk15on</artifactId>
            <version>1.70</version>
          </dependency>
          <dependency>
            <groupId>org.bouncycastle</groupId>
            <artifactId>bcpkix-jdk15on</artifactId>
            <version>1.70</version>
          </dependency>
        </dependencies>
      </project>
    path: pom.xml
    language: xml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.CastArraysAsListToList
examples:
- description: ''
  sources:
  - before: |
      import java.util.Arrays;

      class Foo {
          void bar() {
              Integer[] array1 = (Integer[]) Arrays.asList(1, 2, 3).toArray();
              Integer[][] array2 = (Integer[][]) Arrays.asList(new Integer[]{1}, new Integer[]{2}).toArray();
              Object[][] array3 = (Object[][]) Arrays.asList(new Object[]{}, new Object[]{}).toArray();
          }
      }
    after: |
      import java.util.Arrays;

      class Foo {
          void bar() {
              Integer[] array1 = Arrays.asList(1, 2, 3).toArray(new Integer[0]);
              Integer[][] array2 = Arrays.asList(new Integer[]{1}, new Integer[]{2}).toArray(new Integer[0][]);
              Object[][] array3 = Arrays.asList(new Object[]{}, new Object[]{}).toArray(new Object[0][]);
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.ChangeDefaultKeyStore
examples:
- description: ''
  sources:
  - after: "import java.io.FileInputStream;\nimport java.io.IOException;\nimport java.security.Key;\n\
      import java.security.KeyStore;\n\nclass Foo {\n \tvoid bar() {\n \t\ttry{\n\
      \ \t\t\tKeyStore keystore = KeyStore.getInstance(\"jks\");\n \t\t\tchar[] password\
      \ = \"your_keystore_password\".toCharArray();\n \t\t\tFileInputStream keystoreFile\
      \ = new FileInputStream(\"path_to_your_keystore_file.jks\");\n \t\t\tkeystore.load(keystoreFile,\
      \ password);\n \t\t}\n \t\tcatch (Exception e) {\n \t\t\te.printStackTrace();\n\
      \ \t\t}\n \t}\n}\n"
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.ChangeMethodInvocationReturnType
examples:
- description: ''
  parameters:
  - java.lang.Integer parseInt(String)
  - long
  sources:
  - before: |
      class Foo {
          void bar() {
              int one = Integer.parseInt("1");
          }
      }
    after: |
      class Foo {
          void bar() {
              long one = Integer.parseInt("1");
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.DeleteDeprecatedFinalize
examples:
- description: ''
  sources:
  - before: "package java.awt.color;\n\nimport java.awt.color.ICC_Profile;\nimport\
      \ java.awt.image.ColorModel;\nimport java.awt.image.IndexColorModel;\n\npublic\
      \ class Test {\n\tpublic static void main(String[] args) {\n\t\tbyte ff = (byte)\
      \ 0xff;\n\t\tbyte[] r = { ff, 0, 0, ff, 0 };\n\t\tbyte[] g = { 0, ff, 0, ff,\
      \ 0 };\n\t\tbyte[] b = { 0, 0, ff, ff, 0 };\n\n\t\tICC_Profile profile = ICC_Profile.getInstance(ICC_Profile.CLASS_COLORSPACECONVERSION);\n\
      \t\t// flag\n\t\tprofile.finalize();\n\n\t\tColorModel cm = new IndexColorModel(3,\
      \ 5, r, g, b);\n\n\t\t// flag\n\t\tcm.finalize();\n\n\t\tIndexColorModel icm\
      \ = new IndexColorModel(3, 5, r, g, b);\n\t\t// flag\n\t\ticm.finalize();\n\n\
      \t}\n}\n"
    after: "package java.awt.color;\n\nimport java.awt.color.ICC_Profile;\nimport\
      \ java.awt.image.ColorModel;\nimport java.awt.image.IndexColorModel;\n\npublic\
      \ class Test {\n\tpublic static void main(String[] args) {\n\t\tbyte ff = (byte)\
      \ 0xff;\n\t\tbyte[] r = { ff, 0, 0, ff, 0 };\n\t\tbyte[] g = { 0, ff, 0, ff,\
      \ 0 };\n\t\tbyte[] b = { 0, 0, ff, ff, 0 };\n\n\t\tICC_Profile profile = ICC_Profile.getInstance(ICC_Profile.CLASS_COLORSPACECONVERSION);\n\
      \n\t\tColorModel cm = new IndexColorModel(3, 5, r, g, b);\n\n\t\tIndexColorModel\
      \ icm = new IndexColorModel(3, 5, r, g, b);\n\n\t}\n}\n"
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.DeprecatedCountStackFramesMethod
examples:
- description: ''
  sources:
  - before: |
      import java.lang.Thread;

      public class Test {
          public static void main(String args[]) {
              Thread t1,t2 = new Thread();
              t1.countStackFrames();
          }
      }
    after: |
      import java.lang.Thread;

      public class Test {
          public static void main(String args[]) {
              Thread t1,t2 = new Thread();
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.IBMJDKtoOracleJDK
examples:
- description: ''
  sources:
  - before: |
      import com.ibm.security.auth.module.Krb5LoginModule;

      class TestClass {
          public void testClass() {
              Krb5LoginModule krb = new Krb5LoginModule();
              krb.login();
          }
      }
    after: |
      import com.sun.security.auth.module.Krb5LoginModule;

      class TestClass {
          public void testClass() {
              Krb5LoginModule krb = new Krb5LoginModule();
              krb.login();
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.IBMSemeru
examples:
- description: ''
  sources:
  - before: |
      import com.sun.net.ssl.internal.www.protocol.https.*;  //do NOT flag this

      class Foo{
        void bar() {
            com.sun.net.ssl.internal.www.protocol.https.Handler handler_1 =           //flag
                new com.sun.net.ssl.internal.www.protocol.https.Handler();            //flag
            Handler handler_2 =   new Handler("String", 1); //flag (2)
            testMethod(handler_1);
            testMethod(handler_2);
            if (handler_1 instanceof com.sun.net.ssl.internal.www.protocol.https.Handler){ //flag
                //do nothing
            }

            if (handler_1 instanceof Handler){ //flag
                //do nothing
            }
        }

        public static com.sun.net.ssl.internal.www.protocol.https.Handler testMethod(Handler handler){ //flag (2)
            return handler;
        }
      }
    after: |
      import com.ibm.net.ssl.www2.protocol.https.Handler;
      import com.sun.net.ssl.internal.www.protocol.https.*;  //do NOT flag this

      class Foo{
        void bar() {
            Handler handler_1 =           //flag
                new Handler();            //flag
            Handler handler_2 =   new Handler("String", 1); //flag (2)
            testMethod(handler_1);
            testMethod(handler_2);
            if (handler_1 instanceof Handler){ //flag
                //do nothing
            }

            if (handler_1 instanceof Handler){ //flag
                //do nothing
            }
        }

        public static Handler testMethod(Handler handler){ //flag (2)
            return handler;
        }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.IllegalArgumentExceptionToAlreadyConnectedException
examples:
- description: ''
  sources:
  - before: |
      import java.nio.ByteBuffer;
      import java.net.SocketAddress;
      import java.nio.channels.DatagramChannel;

      class Test {
          void sendDataCatch() {
              try {
                  DatagramChannel channel = DatagramChannel.open();
                  channel.send(ByteBuffer.allocate(1024), new java.net.InetSocketAddress("localhost", 8080));
              } catch (IllegalArgumentException e) {
                  System.out.println("Caught Exception");
              }
          }
      }
    after: |
      import java.nio.ByteBuffer;
      import java.nio.channels.AlreadyConnectedException;
      import java.net.SocketAddress;
      import java.nio.channels.DatagramChannel;

      class Test {
          void sendDataCatch() {
              try {
                  DatagramChannel channel = DatagramChannel.open();
                  channel.send(ByteBuffer.allocate(1024), new java.net.InetSocketAddress("localhost", 8080));
              } catch (AlreadyConnectedException e) {
                  System.out.println("Caught Exception");
              }
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.InternalBindPackages
examples:
- description: ''
  sources:
  - before: |
      class Foo {
          void bar() {
              com.sun.xml.internal.bind.v2.ContextFactory contextFactory = null;
              contextFactory.hashCode();
          }
      }
    after: |
      class Foo {
          void bar() {
              com.sun.xml.bind.v2.ContextFactory contextFactory = null;
              contextFactory.hashCode();
          }
      }
    language: java
  - before: |
      import com.sun.xml.internal.bind.v2.*;

      class Foo3 {
        void bar() {
            ContextFactory factory = null;
            factory.hashCode();
        }

      }
    after: |
      import com.sun.xml.bind.v2.*;

      class Foo3 {
        void bar() {
            ContextFactory factory = null;
            factory.hashCode();
        }

      }
    language: java
  - before: |
      import com.sun.xml.internal.bind.v2.ContextFactory;

      class Foo2 {
        void bar() {
            ContextFactory factory = null;
            factory.hashCode();
        }
      }
    after: |
      import com.sun.xml.bind.v2.ContextFactory;

      class Foo2 {
        void bar() {
            ContextFactory factory = null;
            factory.hashCode();
        }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.JREThrowableFinalMethods
examples:
- description: ''
  parameters:
  - '*..* add1Suppressed(Throwable)'
  - '*..* get1Suppressed()'
  sources:
  - before: |
      import com.test.ThrowableWithIllegalOverrrides;
      class ClassUsingException {
          void methodUsingException(ThrowableWithIllegalOverrrides t1) {
              t1.add1Suppressed(null);
              t1.get1Suppressed();
          }
      }
    after: |
      import com.test.ThrowableWithIllegalOverrrides;
      class ClassUsingException {
          void methodUsingException(ThrowableWithIllegalOverrrides t1) {
              t1.myAddSuppressed(null);
              t1.myGetSuppressed();
          }
      }
    language: java
  - before: |
      package com.test;
      public class ThrowableWithIllegalOverrrides extends Throwable {
          public void add1Suppressed(Throwable exception) {
          }

          public Throwable[] get1Suppressed() {
              return null;
          }
      }
    after: |
      package com.test;
      public class ThrowableWithIllegalOverrrides extends Throwable {
          public void myAddSuppressed(Throwable exception) {
          }

          public Throwable[] myGetSuppressed() {
              return null;
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.Java8toJava11
examples:
- description: ''
  sources:
  - before: |
      import java.nio.file.Path;
      import java.nio.file.Paths;
      import java.net.URI;
      class A {
          Path pathA = Paths.get("path");
          Path pathB = Paths.get("path", "subpath");
          Path pathC = Paths.get(URI.create("file:///path"));
      }
    after: |
      import java.nio.file.Path;
      import java.net.URI;
      class A {
          Path pathA = Path.of("path");
          Path pathB = Path.of("path", "subpath");
          Path pathC = Path.of(URI.create("file:///path"));
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.JpaCacheProperties
examples:
- description: ''
  sources:
  - before: |
      <?xml version="1.0" encoding="UTF-8"?>
      <persistence version="2.0" xmlns="http://java.sun.com/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd">
          <persistence-unit name="set_set_set1"><!-- flag -->
              <shared-cache-mode>NONE</shared-cache-mode><!-- leave -->
              <validation-mode>NONE</validation-mode>
              <properties>
                  <!-- Connection properties -->
                  <property name="openjpa.DataCache" value="falSe"/><!-- remove -->
                  <property name="javax.persistence.sharedCache.mode" value="NONE"/><!-- remove -->
              </properties>
          </persistence-unit>
      </persistence>
    after: |
      <?xml version="1.0" encoding="UTF-8"?>
      <persistence version="2.0" xmlns="http://java.sun.com/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd">
          <persistence-unit name="set_set_set1"><!-- flag -->
              <shared-cache-mode>NONE</shared-cache-mode><!-- leave -->
              <validation-mode>NONE</validation-mode>
              <properties>
                  <!-- Connection properties -->
                  <!-- remove -->
                  <!-- remove -->
              </properties>
          </persistence-unit>
      </persistence>
    language: xml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.MXBeanRule
examples:
- description: ''
  sources:
  - before: |
      import javax.management.MXBean;

      class TestClassAndNonPublicInterface {
          class NonPublic implements NonPublicMBean {
          }

          @MXBean
          private interface NonPublicMBean {
          }
      }
    after: |
      import javax.management.MXBean;

      class TestClassAndNonPublicInterface {
          class NonPublic implements NonPublicMBean {
          }

          @MXBean
          public interface NonPublicMBean {
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.ReferenceCloneMethod
examples:
- description: ''
  sources:
  - before: |
      import java.lang.ref.WeakReference;
      import java.lang.ref.SoftReference;
      import java.lang.ref.PhantomReference;

      class Foo {
          void foo() throws Exception{
              WeakReference<Object> ref = new WeakReference<Object>(null);
              WeakReference<Object> ref1 = (WeakReference<Object>) ref.clone();
              SoftReference<Object> ref3 = new SoftReference<Object>(null);
              SoftReference<Object> ref4 = (SoftReference<Object>) ref3.clone();
              PhantomReference<Object> ref5 = new PhantomReference<Object>(null,null);
              PhantomReference<Object> ref6 = (PhantomReference<Object>) ref5.clone();
          }
       }
    after: |
      import java.lang.ref.WeakReference;
      import java.lang.ref.SoftReference;
      import java.lang.ref.PhantomReference;

      class Foo {
          void foo() throws Exception{
              WeakReference<Object> ref = new WeakReference<Object>(null);
              WeakReference<Object> ref1 = new WeakReference<Object>(ref, new ReferenceQueue<>());
              SoftReference<Object> ref3 = new SoftReference<Object>(null);
              SoftReference<Object> ref4 = new SoftReference<Object>(ref3, new ReferenceQueue<>());
              PhantomReference<Object> ref5 = new PhantomReference<Object>(null,null);
              PhantomReference<Object> ref6 = new PhantomReference<Object>(ref5, new ReferenceQueue<>());
          }
       }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.RemovedModifierAndConstantBootstrapsConstructors
examples:
- description: ''
  sources:
  - before: |
      import java.lang.invoke.ConstantBootstraps;
      import java.lang.reflect.Modifier;

      class RemovedModifierAndConstantBootstrapsConstructorsApp {
           public void testModifier() throws Exception {
               Modifier modifier = new Modifier();
               modifier.classModifiers();
               modifier.fieldModifiers();
               modifier.isFinal(1);
               modifier.isStatic(1);
               Modifier.isPublic(0);
           }
           public void testConstantBootstraps() throws Exception {
               ConstantBootstraps constantBootstraps = new ConstantBootstraps();
               constantBootstraps.enumConstant(null,null,null);
               constantBootstraps.primitiveClass(null,null,null);
               ConstantBootstraps.nullConstant(null, null, null);
           }
      }
    after: |
      import java.lang.invoke.ConstantBootstraps;
      import java.lang.reflect.Modifier;

      class RemovedModifierAndConstantBootstrapsConstructorsApp {
           public void testModifier() throws Exception {
               Modifier modifier = new Modifier();
               Modifier.classModifiers();
               Modifier.fieldModifiers();
               Modifier.isFinal(1);
               Modifier.isStatic(1);
               Modifier.isPublic(0);
           }
           public void testConstantBootstraps() throws Exception {
               ConstantBootstraps constantBootstraps = new ConstantBootstraps();
               ConstantBootstraps.enumConstant(null,null,null);
               ConstantBootstraps.primitiveClass(null,null,null);
               ConstantBootstraps.nullConstant(null, null, null);
           }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.RemovedToolProviderConstructor
examples:
- description: ''
  sources:
  - before: |
      import javax.tools.ToolProvider;
      import javax.tools.JavaCompiler;
      import javax.tools.DocumentationTool;
      import java.lang.ClassLoader;

      class RemovedToolProviderConstructorApp {
           void test() throws Exception {
               ToolProvider tp = null;
               JavaCompiler compiler = tp.getSystemJavaCompiler();
               DocumentationTool dT = tp.getSystemDocumentationTool();
               ClassLoader cl = tp.getSystemToolClassLoader();
               System.out.println(ToolProvider.getSystemJavaCompiler());
               tp.getSystemJavaCompiler().getSourceVersions();
           }
      }
    after: |
      import javax.tools.ToolProvider;
      import javax.tools.JavaCompiler;
      import javax.tools.DocumentationTool;
      import java.lang.ClassLoader;

      class RemovedToolProviderConstructorApp {
           void test() throws Exception {
               ToolProvider tp = null;
               JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
               DocumentationTool dT = ToolProvider.getSystemDocumentationTool();
               ClassLoader cl = ToolProvider.getSystemToolClassLoader();
               System.out.println(ToolProvider.getSystemJavaCompiler());
               ToolProvider.getSystemJavaCompiler().getSourceVersions();
           }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.ReplaceAWTGetPeerMethod
examples:
- description: ''
  parameters:
  - com.test.Component1 getPeer()
  - com.test.TestDummy
  sources:
  - before: |
      import com.test.Component1;
      import com.test.TestDummy;
      class Test {
          void foo() {
              Test t1 = new Test();
              Component1 c = new Component1();
              if (c.getPeer() instanceof com.test.TestDummy) {
              }
              if (c.getPeer() instanceof TestDummy) {
              }
              Component1 y = new Component1();
              if (y.getPeer() != null) {
              }
              if (null != y.getPeer()) {
              }
          }
      }
    after: |
      import com.test.Component1;
      class Test {
          void foo() {
              Test t1 = new Test();
              Component1 c = new Component1();
              if (c.isLightweight()) {
              }
              if (c.isLightweight()) {
              }
              Component1 y = new Component1();
              if (y.isDisplayable()) {
              }
              if (y.isDisplayable()) {
              }
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.ReplaceComSunAWTUtilitiesMethods
examples:
- description: ''
  parameters:
  - com.test.AWTUtilitiesTest isTranslucencySupported1(com.test.AWTUtilitiesTest.Translucency)
  - com.test.AWTUtilitiesTest isWindowOpaque(java.awt.Window)
  - com.test.AWTUtilitiesTest isTranslucencyCapable(java.awt.GraphicsConfiguration)
  - com.test.AWTUtilitiesTest setWindowOpacity(java.awt.Window,float)
  - com.test.AWTUtilitiesTest getWindowOpacity(java.awt.Window)
  - com.test.AWTUtilitiesTest getWindowShape(java.awt.Window)
  - com.test.AWTUtilitiesTest setComponentMixingCutoutShape(java.awt.Component,java.awt.Shape)
  sources:
  - before: |
      package com.test;
      import com.test.AWTUtilitiesTest;
      import java.awt.Window;
      import java.awt.*;
      import javax.swing.*;
      import java.awt.geom.Ellipse2D;

      class Test {
          void foo() {
              Window win = new Window(new JFrame("test"));
              boolean f = AWTUtilitiesTest.isWindowOpaque(win);
              AWTUtilitiesTest.setWindowOpacity(win,1);
              float l = AWTUtilitiesTest.getWindowOpacity(win);
              Shape sh = AWTUtilitiesTest.getWindowShape(win);
              GraphicsConfiguration gc = null;
              boolean f = AWTUtilitiesTest.isTranslucencyCapable(gc);
              Component c = null;
              Shape sh = new Ellipse2D.Double(0, 0, c.getWidth(), c.getHeight());
              AWTUtilitiesTest.setComponentMixingCutoutShape(c, sh);
          }
      }
    after: |
      package com.test;
      import java.awt.Window;
      import java.awt.*;
      import javax.swing.*;
      import java.awt.geom.Ellipse2D;

      class Test {
          void foo() {
              Window win = new Window(new JFrame("test"));
              boolean f = win.isOpaque();
              win.setOpacity(1);
              float l = win.getOpacity();
              Shape sh = win.getShape();
              GraphicsConfiguration gc = null;
              boolean f = gc.isTranslucencyCapable();
              Component c = null;
              Shape sh = new Ellipse2D.Double(0, 0, c.getWidth(), c.getHeight());
              c.setMixingCutoutShape(sh);
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.ReplaceLocalizedStreamMethods
examples:
- description: ''
  parameters:
  - com.test.Runtime1 getLocalizedInputStream1(java.io.InputStream)
  - com.test.Runtime1 getLocalizedOutputStream1(java.io.OutputStream)
  sources:
  - before: |
      package com.test;
      import java.io.InputStream;

      class Test {
          void exampleMethod(Runtime1 rt, InputStream in) {
              InputStream newStream = rt.getLocalizedInputStream1(in);
          }
      }
    after: |
      package com.test;
      import java.io.InputStream;

      class Test {
          void exampleMethod(Runtime1 rt, InputStream in) {
              InputStream newStream = in;
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.SunNetSslPackageUnavailable
examples:
- description: ''
  sources:
  - before: |
      import com.sun.net.ssl.HttpsURLConnection;

      class TestSunNetSsl {
            void useThePackages() {
                    HttpsURLConnection con;
            }
      }
    after: |
      import javax.net.ssl.HttpsURLConnection;

      class TestSunNetSsl {
            void useThePackages() {
                    HttpsURLConnection con;
            }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.ThreadStopDestroy
examples:
- description: ''
  sources:
  - before: |
      class Foo {
          void bar() {
              Thread.currentThread().stop();
              // We can't test removal of Thread.destroy() or stop(Throwable) on Java 17
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.UpgradeJavaVersion
examples:
- description: ''
  parameters:
  - '17'
  sources:
  - before: |
      <project>
        <modelVersion>4.0.0</modelVersion>

        <properties>
          <java.version>1.8</java.version>
          <maven.compiler.source>1.8</maven.compiler.source>
          <maven.compiler.target>1.8</maven.compiler.target>
        </properties>

        <groupId>com.mycompany.app</groupId>
        <artifactId>my-app</artifactId>
        <version>1</version>
      </project>
    after: |
      <project>
        <modelVersion>4.0.0</modelVersion>

        <properties>
          <java.version>17</java.version>
          <maven.compiler.source>17</maven.compiler.source>
          <maven.compiler.target>17</maven.compiler.target>
        </properties>

        <groupId>com.mycompany.app</groupId>
        <artifactId>my-app</artifactId>
        <version>1</version>
      </project>
    path: pom.xml
    language: xml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.UpgradePluginsForJava11
examples:
- description: ''
  sources:
  - before: |
      <project>
        <groupId>com.mycompany.app</groupId>
        <artifactId>my-app</artifactId>
        <version>1</version>
        <properties>
          <wro4j.version>1.8.0</wro4j.version>
        </properties>
        <build>
          <plugins>
            <plugin>
              <groupId>ro.isdc.wro4j</groupId>
              <artifactId>wro4j-maven-plugin</artifactId>
              <version>${wro4j.version}</version>
            </plugin>
          </plugins>
        </build>
      </project>
    after: |
      <project>
        <groupId>com.mycompany.app</groupId>
        <artifactId>my-app</artifactId>
        <version>1</version>
        <properties>
          <wro4j.version>1.10.1</wro4j.version>
        </properties>
        <build>
          <plugins>
            <plugin>
              <groupId>ro.isdc.wro4j</groupId>
              <artifactId>wro4j-maven-plugin</artifactId>
              <version>${wro4j.version}</version>
            </plugin>
          </plugins>
        </build>
      </project>
    path: pom.xml
    language: xml
- description: ''
  sources:
  - before: project
    language: mavenProject
  - before: |
      <project>
        <groupId>com.mycompany.app</groupId>
        <artifactId>my-app</artifactId>
        <version>1</version>
        <build>
          <plugins>
            <plugin>
              <groupId>org.codehaus.mojo</groupId>
              <artifactId>jaxb2-maven-plugin</artifactId>
              <version>2.3.1</version>
            </plugin>
          </plugins>
        </build>
      </project>
    path: pom.xml
    language: xml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.UpgradeToJava17
examples:
- description: ''
  sources:
  - before: |
      package com.abc;

      class A {
         public String test() {
             return String.format("Hello %s", "world");
         }
      }
    after: |
      package com.abc;

      class A {
         public String test() {
             return "Hello %s".formatted("world");
         }
      }
    language: java
  - before: project
    language: mavenProject
  - before: |
      <project>
        <modelVersion>4.0.0</modelVersion>

        <properties>
          <java.version>1.8</java.version>
          <maven.compiler.source>1.8</maven.compiler.source>
          <maven.compiler.target>1.8</maven.compiler.target>
        </properties>

        <groupId>com.mycompany.app</groupId>
        <artifactId>my-app</artifactId>
        <version>1</version>
      </project>
    after: |
      <project>
        <modelVersion>4.0.0</modelVersion>

        <properties>
          <java.version>17</java.version>
          <maven.compiler.source>17</maven.compiler.source>
          <maven.compiler.target>17</maven.compiler.target>
        </properties>

        <groupId>com.mycompany.app</groupId>
        <artifactId>my-app</artifactId>
        <version>1</version>
      </project>
    path: pom.xml
    language: xml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.UpgradeToJava6
examples:
- description: ''
  sources:
  - before: "package com.test.withoutWrapperMethods;\n\nimport java.io.PrintWriter;\n\
      import java.sql.Connection;\nimport java.sql.SQLException;\n\nimport javax.sql.DataSource;\n\
      \npublic class JRE6WrapperDataSource implements DataSource {\n\n\tpublic Connection\
      \ getConnection() throws SQLException {\n\t\t// TODO Auto-generated method stub\n\
      \t\treturn null;\n\t}\n\n\tpublic Connection getConnection(String username,\
      \ String password)\n\t\t\tthrows SQLException {\n\t\t// TODO Auto-generated\
      \ method stub\n\t\treturn null;\n\t}\n\n\tpublic PrintWriter getLogWriter()\
      \ throws SQLException {\n\t\t// TODO Auto-generated method stub\n\t\treturn\
      \ null;\n\t}\n\n\tpublic void setLogWriter(PrintWriter out) throws SQLException\
      \ {\n\t\t// TODO Auto-generated method stub\n\n\t}\n\n\tpublic void setLoginTimeout(int\
      \ seconds) throws SQLException {\n\t\t// TODO Auto-generated method stub\n\n\
      \t}\n\n\tpublic int getLoginTimeout() throws SQLException {\n\t\t// TODO Auto-generated\
      \ method stub\n\t\treturn 0;\n\t}\n\n}\n"
    after: "package com.test.withoutWrapperMethods;\n\nimport java.io.PrintWriter;\n\
      import java.sql.Connection;\nimport java.sql.SQLException;\n\nimport javax.sql.DataSource;\n\
      \npublic class JRE6WrapperDataSource implements DataSource {\n\n\tpublic Connection\
      \ getConnection() throws SQLException {\n\t\t// TODO Auto-generated method stub\n\
      \t\treturn null;\n\t}\n\n\tpublic Connection getConnection(String username,\
      \ String password)\n\t\t\tthrows SQLException {\n\t\t// TODO Auto-generated\
      \ method stub\n\t\treturn null;\n\t}\n\n\tpublic PrintWriter getLogWriter()\
      \ throws SQLException {\n\t\t// TODO Auto-generated method stub\n\t\treturn\
      \ null;\n\t}\n\n\tpublic void setLogWriter(PrintWriter out) throws SQLException\
      \ {\n\t\t// TODO Auto-generated method stub\n\n\t}\n\n\tpublic void setLoginTimeout(int\
      \ seconds) throws SQLException {\n\t\t// TODO Auto-generated method stub\n\n\
      \t}\n\n\tpublic int getLoginTimeout() throws SQLException {\n\t\t// TODO Auto-generated\
      \ method stub\n\t\treturn 0;\n\t}\n\n    public boolean isWrapperFor(Class<?>\
      \ iface) throws java.sql.SQLException {\n        // TODO Auto-generated method\
      \ stub\n        return iface != null && iface.isAssignableFrom(this.getClass());\n\
      \    }\n\n    public <T> T unwrap(Class<T> iface) throws java.sql.SQLException\
      \ {\n        // TODO Auto-generated method stub\n        try {\n           \
      \ if (iface != null && iface.isAssignableFrom(this.getClass())) {\n        \
      \        return (T) this;\n            }\n            throw new java.sql.SQLException(\"\
      Auto-generated unwrap failed; Revisit implementation\");\n        } catch (Exception\
      \ e) {\n            throw new java.sql.SQLException(e);\n        }\n    }\n\n\
      }\n"
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.UpgradeToJava7
examples:
- description: ''
  sources:
  - before: |
      package com.test.withoutV170Methods;

      import java.io.InputStream;
      import java.io.Reader;
      import java.math.BigDecimal;
      import java.net.URL;
      import java.sql.Array;
      import java.sql.Blob;
      import java.sql.Clob;
      import java.sql.Connection;
      import java.sql.Date;
      import java.sql.NClob;
      import java.sql.ParameterMetaData;
      import java.sql.Ref;
      import java.sql.ResultSet;
      import java.sql.ResultSetMetaData;
      import java.sql.RowId;
      import java.sql.SQLException;
      import java.sql.SQLWarning;
      import java.sql.CallableStatement;
      import java.sql.SQLXML;
      import java.sql.Time;
      import java.sql.Timestamp;
      import java.util.Calendar;
      import java.util.Map;

      public class JRE7JdbcCallableStatement implements CallableStatement {

        public <T> T unwrap(Class<T> iface) throws SQLException {
          return null;
        }

        public boolean isWrapperFor(Class<?> iface) throws SQLException {
          return false;
        }

        public void addBatch(String sql) throws SQLException {

        }

        public void cancel() throws SQLException {

        }

        public void clearBatch() throws SQLException {

        }

        public void clearWarnings() throws SQLException {

        }

        public void close() throws SQLException {

        }

        public boolean execute(String sql) throws SQLException {
          return false;
        }

        public boolean execute(String sql, int autoGeneratedKeys)
            throws SQLException {
          return false;
        }

        public boolean execute(String sql, int[] columnIndexes) throws SQLException {
          return false;
        }

        public boolean execute(String sql, String[] columnNames)
            throws SQLException {
          return false;
        }

        public int[] executeBatch() throws SQLException {
          return null;
        }

        public ResultSet executeQuery(String sql) throws SQLException {
          return null;
        }

        public int executeUpdate(String sql) throws SQLException {
          return 0;
        }

        public int executeUpdate(String sql, int autoGeneratedKeys)
            throws SQLException {
          return 0;
        }

        public int executeUpdate(String sql, int[] columnIndexes)
            throws SQLException {
          return 0;
        }

        public int executeUpdate(String sql, String[] columnNames)
            throws SQLException {
          return 0;
        }

        public Connection getConnection() throws SQLException {
          return null;
        }

        public int getFetchDirection() throws SQLException {
          return 0;
        }

        public int getFetchSize() throws SQLException {
          return 0;
        }

        public ResultSet getGeneratedKeys() throws SQLException {
          return null;
        }

        public int getMaxFieldSize() throws SQLException {
          return 0;
        }

        public int getMaxRows() throws SQLException {
          return 0;
        }

        public boolean getMoreResults() throws SQLException {
          return false;
        }

        public boolean getMoreResults(int current) throws SQLException {
          return false;
        }

        public int getQueryTimeout() throws SQLException {
          return 0;
        }

        public ResultSet getResultSet() throws SQLException {
          return null;
        }

        public int getResultSetConcurrency() throws SQLException {
          return 0;
        }

        public int getResultSetHoldability() throws SQLException {
          return 0;
        }

        public int getResultSetType() throws SQLException {
          return 0;
        }

        public int getUpdateCount() throws SQLException {
          return 0;
        }

        public SQLWarning getWarnings() throws SQLException {
          return null;
        }

        public void setCursorName(String name) throws SQLException {

        }

        public void setEscapeProcessing(boolean enable) throws SQLException {

        }

        public void setFetchDirection(int direction) throws SQLException {

        }

        public void setFetchSize(int rows) throws SQLException {

        }

        public void setMaxFieldSize(int max) throws SQLException {

        }

        public void setMaxRows(int max) throws SQLException {

        }

        public void setQueryTimeout(int seconds) throws SQLException {

        }

        public boolean isClosed() throws SQLException {
          return false;
        }

        public void setPoolable(boolean poolable) throws SQLException {

        }

        public boolean isPoolable() throws SQLException {

          return false;
        }

        public void addBatch() throws SQLException {
          // TODO Auto-generated method stub
        }

        public void clearParameters() throws SQLException {
          // TODO Auto-generated method stub
        }

        public boolean execute() throws SQLException {
          // TODO Auto-generated method stub
          return false;
        }

        public ResultSet executeQuery() throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public int executeUpdate() throws SQLException {
          // TODO Auto-generated method stub
          return 0;
        }

        public ResultSetMetaData getMetaData() throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public ParameterMetaData getParameterMetaData() throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public void setArray(int arg0, Array arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setAsciiStream(int arg0, InputStream arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setAsciiStream(int arg0, InputStream arg1, int arg2)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setAsciiStream(int arg0, InputStream arg1, long arg2)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setBigDecimal(int arg0, BigDecimal arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setBinaryStream(int arg0, InputStream arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setBinaryStream(int arg0, InputStream arg1, int arg2)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setBinaryStream(int arg0, InputStream arg1, long arg2)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setBlob(int arg0, Blob arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setBlob(int arg0, InputStream arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setBlob(int arg0, InputStream arg1, long arg2)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setBoolean(int arg0, boolean arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setByte(int arg0, byte arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setBytes(int arg0, byte[] arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setCharacterStream(int arg0, Reader arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setCharacterStream(int arg0, Reader arg1, int arg2)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setCharacterStream(int arg0, Reader arg1, long arg2)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setClob(int arg0, Clob arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setClob(int arg0, Reader arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setClob(int arg0, Reader arg1, long arg2) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setDate(int arg0, Date arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setDate(int arg0, Date arg1, Calendar arg2) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setDouble(int arg0, double arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setFloat(int arg0, float arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setInt(int arg0, int arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setLong(int arg0, long arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setNCharacterStream(int arg0, Reader arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setNCharacterStream(int arg0, Reader arg1, long arg2)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setNClob(int arg0, NClob arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setNClob(int arg0, Reader arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setNClob(int arg0, Reader arg1, long arg2) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setNString(int arg0, String arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setNull(int arg0, int arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setNull(int arg0, int arg1, String arg2) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setObject(int arg0, Object arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setObject(int arg0, Object arg1, int arg2) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setObject(int arg0, Object arg1, int arg2, int arg3)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setRef(int arg0, Ref arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setRowId(int arg0, RowId arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setSQLXML(int arg0, SQLXML arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setShort(int arg0, short arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setString(int arg0, String arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setTime(int arg0, Time arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setTime(int arg0, Time arg1, Calendar arg2) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setTimestamp(int arg0, Timestamp arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setTimestamp(int arg0, Timestamp arg1, Calendar arg2)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setURL(int arg0, URL arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setUnicodeStream(int arg0, InputStream arg1, int arg2)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public Array getArray(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Array getArray(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public BigDecimal getBigDecimal(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public BigDecimal getBigDecimal(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public BigDecimal getBigDecimal(int parameterIndex, int scale)
            throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Blob getBlob(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Blob getBlob(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public boolean getBoolean(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return false;
        }

        public boolean getBoolean(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return false;
        }

        public byte getByte(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return 0;
        }

        public byte getByte(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return 0;
        }

        public byte[] getBytes(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public byte[] getBytes(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Reader getCharacterStream(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Reader getCharacterStream(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Clob getClob(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Clob getClob(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Date getDate(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Date getDate(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Date getDate(int parameterIndex, Calendar cal) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Date getDate(String parameterName, Calendar cal) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public double getDouble(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return 0;
        }

        public double getDouble(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return 0;
        }

        public float getFloat(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return 0;
        }

        public float getFloat(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return 0;
        }

        public int getInt(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return 0;
        }

        public int getInt(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return 0;
        }

        public long getLong(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return 0;
        }

        public long getLong(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return 0;
        }

        public Reader getNCharacterStream(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Reader getNCharacterStream(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public NClob getNClob(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public NClob getNClob(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public String getNString(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public String getNString(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Object getObject(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Object getObject(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Object getObject(int parameterIndex, Map<String, Class<?>> map)
            throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Object getObject(String parameterName, Map<String, Class<?>> map)
            throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Ref getRef(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Ref getRef(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public RowId getRowId(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public RowId getRowId(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public SQLXML getSQLXML(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public SQLXML getSQLXML(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public short getShort(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return 0;
        }

        public short getShort(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return 0;
        }

        public String getString(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public String getString(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Time getTime(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Time getTime(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Time getTime(int parameterIndex, Calendar cal) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Time getTime(String parameterName, Calendar cal) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Timestamp getTimestamp(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Timestamp getTimestamp(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Timestamp getTimestamp(int parameterIndex, Calendar cal)
            throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Timestamp getTimestamp(String parameterName, Calendar cal)
            throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public URL getURL(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public URL getURL(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public void registerOutParameter(int parameterIndex, int sqlType)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void registerOutParameter(String parameterName, int sqlType)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void registerOutParameter(int parameterIndex, int sqlType, int scale)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void registerOutParameter(int parameterIndex, int sqlType,
            String typeName) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void registerOutParameter(String parameterName, int sqlType,
            int scale) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void registerOutParameter(String parameterName, int sqlType,
            String typeName) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setAsciiStream(String parameterName, InputStream x)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setAsciiStream(String parameterName, InputStream x, int length)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setAsciiStream(String parameterName, InputStream x, long length)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setBigDecimal(String parameterName, BigDecimal x)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setBinaryStream(String parameterName, InputStream x)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setBinaryStream(String parameterName, InputStream x, int length)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setBinaryStream(String parameterName, InputStream x, long length)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setBlob(String parameterName, Blob x) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setBlob(String parameterName, InputStream inputStream)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setBlob(String parameterName, InputStream inputStream,
            long length) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setBoolean(String parameterName, boolean x) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setByte(String parameterName, byte x) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setBytes(String parameterName, byte[] x) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setCharacterStream(String parameterName, Reader reader)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setCharacterStream(String parameterName, Reader reader,
            int length) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setCharacterStream(String parameterName, Reader reader,
            long length) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setClob(String parameterName, Clob x) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setClob(String parameterName, Reader reader)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setClob(String parameterName, Reader reader, long length)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setDate(String parameterName, Date x) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setDate(String parameterName, Date x, Calendar cal)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setDouble(String parameterName, double x) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setFloat(String parameterName, float x) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setInt(String parameterName, int x) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setLong(String parameterName, long x) throws SQLException {
          // TODO Auto-generated method stub

        }

        public void setNCharacterStream(String parameterName, Reader value)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setNCharacterStream(String parameterName, Reader value,
            long length) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setNClob(String parameterName, NClob value) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setNClob(String parameterName, Reader reader)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setNClob(String parameterName, Reader reader, long length)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setNString(String parameterName, String value)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setNull(String parameterName, int sqlType) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setNull(String parameterName, int sqlType, String typeName)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setObject(String parameterName, Object x) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setObject(String parameterName, Object x, int targetSqlType)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setObject(String parameterName, Object x, int targetSqlType,
            int scale) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setRowId(String parameterName, RowId x) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setSQLXML(String parameterName, SQLXML xmlObject)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setShort(String parameterName, short x) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setString(String parameterName, String x) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setTime(String parameterName, Time x) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setTime(String parameterName, Time x, Calendar cal)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setTimestamp(String parameterName, Timestamp x)
            throws SQLException {
          // TODO Auto-generated method stub

        }

        public void setTimestamp(String parameterName, Timestamp x, Calendar cal)
            throws SQLException {
          // TODO Auto-generated method stub

        }

        public void setURL(String parameterName, URL val) throws SQLException {
          // TODO Auto-generated method stub

        }

        public boolean wasNull() throws SQLException {
          // TODO Auto-generated method stub
          return false;
        }

      }
    after: |
      package com.test.withoutV170Methods;

      import java.io.InputStream;
      import java.io.Reader;
      import java.math.BigDecimal;
      import java.net.URL;
      import java.sql.Array;
      import java.sql.Blob;
      import java.sql.Clob;
      import java.sql.Connection;
      import java.sql.Date;
      import java.sql.NClob;
      import java.sql.ParameterMetaData;
      import java.sql.Ref;
      import java.sql.ResultSet;
      import java.sql.ResultSetMetaData;
      import java.sql.RowId;
      import java.sql.SQLException;
      import java.sql.SQLWarning;
      import java.sql.CallableStatement;
      import java.sql.SQLXML;
      import java.sql.Time;
      import java.sql.Timestamp;
      import java.util.Calendar;
      import java.util.Map;

      public class JRE7JdbcCallableStatement implements CallableStatement {

        public <T> T unwrap(Class<T> iface) throws SQLException {
          return null;
        }

        public boolean isWrapperFor(Class<?> iface) throws SQLException {
          return false;
        }

        public void addBatch(String sql) throws SQLException {

        }

        public void cancel() throws SQLException {

        }

        public void clearBatch() throws SQLException {

        }

        public void clearWarnings() throws SQLException {

        }

        public void close() throws SQLException {

        }

        public boolean execute(String sql) throws SQLException {
          return false;
        }

        public boolean execute(String sql, int autoGeneratedKeys)
            throws SQLException {
          return false;
        }

        public boolean execute(String sql, int[] columnIndexes) throws SQLException {
          return false;
        }

        public boolean execute(String sql, String[] columnNames)
            throws SQLException {
          return false;
        }

        public int[] executeBatch() throws SQLException {
          return null;
        }

        public ResultSet executeQuery(String sql) throws SQLException {
          return null;
        }

        public int executeUpdate(String sql) throws SQLException {
          return 0;
        }

        public int executeUpdate(String sql, int autoGeneratedKeys)
            throws SQLException {
          return 0;
        }

        public int executeUpdate(String sql, int[] columnIndexes)
            throws SQLException {
          return 0;
        }

        public int executeUpdate(String sql, String[] columnNames)
            throws SQLException {
          return 0;
        }

        public Connection getConnection() throws SQLException {
          return null;
        }

        public int getFetchDirection() throws SQLException {
          return 0;
        }

        public int getFetchSize() throws SQLException {
          return 0;
        }

        public ResultSet getGeneratedKeys() throws SQLException {
          return null;
        }

        public int getMaxFieldSize() throws SQLException {
          return 0;
        }

        public int getMaxRows() throws SQLException {
          return 0;
        }

        public boolean getMoreResults() throws SQLException {
          return false;
        }

        public boolean getMoreResults(int current) throws SQLException {
          return false;
        }

        public int getQueryTimeout() throws SQLException {
          return 0;
        }

        public ResultSet getResultSet() throws SQLException {
          return null;
        }

        public int getResultSetConcurrency() throws SQLException {
          return 0;
        }

        public int getResultSetHoldability() throws SQLException {
          return 0;
        }

        public int getResultSetType() throws SQLException {
          return 0;
        }

        public int getUpdateCount() throws SQLException {
          return 0;
        }

        public SQLWarning getWarnings() throws SQLException {
          return null;
        }

        public void setCursorName(String name) throws SQLException {

        }

        public void setEscapeProcessing(boolean enable) throws SQLException {

        }

        public void setFetchDirection(int direction) throws SQLException {

        }

        public void setFetchSize(int rows) throws SQLException {

        }

        public void setMaxFieldSize(int max) throws SQLException {

        }

        public void setMaxRows(int max) throws SQLException {

        }

        public void setQueryTimeout(int seconds) throws SQLException {

        }

        public boolean isClosed() throws SQLException {
          return false;
        }

        public void setPoolable(boolean poolable) throws SQLException {

        }

        public boolean isPoolable() throws SQLException {

          return false;
        }

        public void addBatch() throws SQLException {
          // TODO Auto-generated method stub
        }

        public void clearParameters() throws SQLException {
          // TODO Auto-generated method stub
        }

        public boolean execute() throws SQLException {
          // TODO Auto-generated method stub
          return false;
        }

        public ResultSet executeQuery() throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public int executeUpdate() throws SQLException {
          // TODO Auto-generated method stub
          return 0;
        }

        public ResultSetMetaData getMetaData() throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public ParameterMetaData getParameterMetaData() throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public void setArray(int arg0, Array arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setAsciiStream(int arg0, InputStream arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setAsciiStream(int arg0, InputStream arg1, int arg2)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setAsciiStream(int arg0, InputStream arg1, long arg2)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setBigDecimal(int arg0, BigDecimal arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setBinaryStream(int arg0, InputStream arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setBinaryStream(int arg0, InputStream arg1, int arg2)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setBinaryStream(int arg0, InputStream arg1, long arg2)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setBlob(int arg0, Blob arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setBlob(int arg0, InputStream arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setBlob(int arg0, InputStream arg1, long arg2)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setBoolean(int arg0, boolean arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setByte(int arg0, byte arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setBytes(int arg0, byte[] arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setCharacterStream(int arg0, Reader arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setCharacterStream(int arg0, Reader arg1, int arg2)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setCharacterStream(int arg0, Reader arg1, long arg2)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setClob(int arg0, Clob arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setClob(int arg0, Reader arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setClob(int arg0, Reader arg1, long arg2) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setDate(int arg0, Date arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setDate(int arg0, Date arg1, Calendar arg2) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setDouble(int arg0, double arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setFloat(int arg0, float arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setInt(int arg0, int arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setLong(int arg0, long arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setNCharacterStream(int arg0, Reader arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setNCharacterStream(int arg0, Reader arg1, long arg2)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setNClob(int arg0, NClob arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setNClob(int arg0, Reader arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setNClob(int arg0, Reader arg1, long arg2) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setNString(int arg0, String arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setNull(int arg0, int arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setNull(int arg0, int arg1, String arg2) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setObject(int arg0, Object arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setObject(int arg0, Object arg1, int arg2) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setObject(int arg0, Object arg1, int arg2, int arg3)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setRef(int arg0, Ref arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setRowId(int arg0, RowId arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setSQLXML(int arg0, SQLXML arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setShort(int arg0, short arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setString(int arg0, String arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setTime(int arg0, Time arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setTime(int arg0, Time arg1, Calendar arg2) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setTimestamp(int arg0, Timestamp arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setTimestamp(int arg0, Timestamp arg1, Calendar arg2)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setURL(int arg0, URL arg1) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setUnicodeStream(int arg0, InputStream arg1, int arg2)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public Array getArray(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Array getArray(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public BigDecimal getBigDecimal(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public BigDecimal getBigDecimal(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public BigDecimal getBigDecimal(int parameterIndex, int scale)
            throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Blob getBlob(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Blob getBlob(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public boolean getBoolean(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return false;
        }

        public boolean getBoolean(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return false;
        }

        public byte getByte(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return 0;
        }

        public byte getByte(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return 0;
        }

        public byte[] getBytes(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public byte[] getBytes(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Reader getCharacterStream(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Reader getCharacterStream(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Clob getClob(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Clob getClob(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Date getDate(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Date getDate(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Date getDate(int parameterIndex, Calendar cal) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Date getDate(String parameterName, Calendar cal) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public double getDouble(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return 0;
        }

        public double getDouble(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return 0;
        }

        public float getFloat(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return 0;
        }

        public float getFloat(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return 0;
        }

        public int getInt(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return 0;
        }

        public int getInt(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return 0;
        }

        public long getLong(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return 0;
        }

        public long getLong(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return 0;
        }

        public Reader getNCharacterStream(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Reader getNCharacterStream(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public NClob getNClob(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public NClob getNClob(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public String getNString(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public String getNString(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Object getObject(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Object getObject(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Object getObject(int parameterIndex, Map<String, Class<?>> map)
            throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Object getObject(String parameterName, Map<String, Class<?>> map)
            throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Ref getRef(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Ref getRef(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public RowId getRowId(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public RowId getRowId(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public SQLXML getSQLXML(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public SQLXML getSQLXML(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public short getShort(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return 0;
        }

        public short getShort(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return 0;
        }

        public String getString(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public String getString(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Time getTime(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Time getTime(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Time getTime(int parameterIndex, Calendar cal) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Time getTime(String parameterName, Calendar cal) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Timestamp getTimestamp(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Timestamp getTimestamp(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Timestamp getTimestamp(int parameterIndex, Calendar cal)
            throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public Timestamp getTimestamp(String parameterName, Calendar cal)
            throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public URL getURL(int parameterIndex) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public URL getURL(String parameterName) throws SQLException {
          // TODO Auto-generated method stub
          return null;
        }

        public void registerOutParameter(int parameterIndex, int sqlType)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void registerOutParameter(String parameterName, int sqlType)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void registerOutParameter(int parameterIndex, int sqlType, int scale)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void registerOutParameter(int parameterIndex, int sqlType,
            String typeName) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void registerOutParameter(String parameterName, int sqlType,
            int scale) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void registerOutParameter(String parameterName, int sqlType,
            String typeName) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setAsciiStream(String parameterName, InputStream x)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setAsciiStream(String parameterName, InputStream x, int length)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setAsciiStream(String parameterName, InputStream x, long length)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setBigDecimal(String parameterName, BigDecimal x)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setBinaryStream(String parameterName, InputStream x)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setBinaryStream(String parameterName, InputStream x, int length)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setBinaryStream(String parameterName, InputStream x, long length)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setBlob(String parameterName, Blob x) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setBlob(String parameterName, InputStream inputStream)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setBlob(String parameterName, InputStream inputStream,
            long length) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setBoolean(String parameterName, boolean x) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setByte(String parameterName, byte x) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setBytes(String parameterName, byte[] x) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setCharacterStream(String parameterName, Reader reader)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setCharacterStream(String parameterName, Reader reader,
            int length) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setCharacterStream(String parameterName, Reader reader,
            long length) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setClob(String parameterName, Clob x) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setClob(String parameterName, Reader reader)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setClob(String parameterName, Reader reader, long length)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setDate(String parameterName, Date x) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setDate(String parameterName, Date x, Calendar cal)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setDouble(String parameterName, double x) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setFloat(String parameterName, float x) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setInt(String parameterName, int x) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setLong(String parameterName, long x) throws SQLException {
          // TODO Auto-generated method stub

        }

        public void setNCharacterStream(String parameterName, Reader value)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setNCharacterStream(String parameterName, Reader value,
            long length) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setNClob(String parameterName, NClob value) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setNClob(String parameterName, Reader reader)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setNClob(String parameterName, Reader reader, long length)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setNString(String parameterName, String value)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setNull(String parameterName, int sqlType) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setNull(String parameterName, int sqlType, String typeName)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setObject(String parameterName, Object x) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setObject(String parameterName, Object x, int targetSqlType)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setObject(String parameterName, Object x, int targetSqlType,
            int scale) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setRowId(String parameterName, RowId x) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setSQLXML(String parameterName, SQLXML xmlObject)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setShort(String parameterName, short x) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setString(String parameterName, String x) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setTime(String parameterName, Time x) throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setTime(String parameterName, Time x, Calendar cal)
            throws SQLException {
          // TODO Auto-generated method stub
        }

        public void setTimestamp(String parameterName, Timestamp x)
            throws SQLException {
          // TODO Auto-generated method stub

        }

        public void setTimestamp(String parameterName, Timestamp x, Calendar cal)
            throws SQLException {
          // TODO Auto-generated method stub

        }

        public void setURL(String parameterName, URL val) throws SQLException {
          // TODO Auto-generated method stub

        }

        public boolean wasNull() throws SQLException {
          // TODO Auto-generated method stub
          return false;
        }

          public void closeOnCompletion() {
              // TODO Auto-generated method stub
          }

          public boolean isCloseOnCompletion() {
              // TODO Auto-generated method stub
              return false;
          }

      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.UpgradeToJava8
examples:
- description: ''
  sources:
  - before: |
      package com.abc;

      interface SomeMBean {
          String test();
      }
    after: |
      package com.abc;

      public interface SomeMBean {
          String test();
      }
    language: java
  - before: |
      package com.abc;

      interface SomeMXBean {
          String test();
      }
    after: |
      package com.abc;

      public interface SomeMXBean {
          String test();
      }
    language: java
  - before: project
    language: mavenProject
  - before: |
      <project>
        <modelVersion>4.0.0</modelVersion>

        <groupId>com.mycompany.app</groupId>
        <artifactId>my-app</artifactId>
        <version>1</version>

        <dependencies>
          <dependency>
            <groupId>org.bouncycastle</groupId>
            <artifactId>bcprov-jdk15on</artifactId>
            <version>1.70</version>
          </dependency>
          <dependency>
            <groupId>org.bouncycastle</groupId>
            <artifactId>bcpkix-jdk15on</artifactId>
            <version>1.70</version>
          </dependency>
        </dependencies>
      </project>
    path: pom.xml
    language: xml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.UseJavaUtilBase64
examples:
- description: ''
  parameters:
  - test.sun.misc
  - 'false'
  sources:
  - before: |
      package test.sun.misc;

      import test.sun.misc.BASE64Encoder;
      import test.sun.misc.BASE64Decoder;
      import java.io.IOException;

      class Test {
          void test(byte[] bBytes) {
              BASE64Encoder encoder = new BASE64Encoder();
              String encoded = encoder.encode(bBytes);
              encoded += encoder.encodeBuffer(bBytes);
              try {
                  byte[] decoded = new BASE64Decoder().decodeBuffer(encoded);
              } catch (IOException e) {
                  e.printStackTrace();
              }
          }
      }
    after: |
      package test.sun.misc;

      import java.util.Base64;

      class Test {
          void test(byte[] bBytes) {
              Base64.Encoder encoder = Base64.getEncoder();
              String encoded = encoder.encodeToString(bBytes);
              encoded += encoder.encodeToString(bBytes);
              byte[] decoded = Base64.getDecoder().decode(encoded);
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.UseTabsOrSpaces
examples:
- description: ''
  parameters:
  - 'true'
  sources:
  - before: |
      class Test {
          void test() {
          }
      }
    after: "class Test {\n\tvoid test() {\n\t}\n}\n"
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.concurrent.JavaConcurrentAPIs
examples:
- description: ''
  sources:
  - before: |
      import java.util.concurrent.atomic.AtomicBoolean;
      public class Test {
          public boolean method() {
              AtomicBoolean value = new AtomicBoolean();
              return value.weakCompareAndSet(true, true);
          }
      }
    after: |
      import java.util.concurrent.atomic.AtomicBoolean;
      public class Test {
          public boolean method() {
              AtomicBoolean value = new AtomicBoolean();
              return value.weakCompareAndSetPlain(true, true);
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.guava.NoGuava
examples:
- description: ''
  sources:
  - before: |
      import com.google.common.base.MoreObjects;

      class A {
          Object foo(Object obj) {
              return MoreObjects.firstNonNull(obj, "default");
          }
      }
    after: |
      import java.util.Objects;

      class A {
          Object foo(Object obj) {
              return Objects.requireNonNullElse(obj, "default");
          }
      }
    language: java
- description: ''
  sources:
  - before: |
      import com.google.common.base.Optional;

      class A {
          Optional<String> foo() {
              return Optional.absent();
          }
      }
    after: |
      import java.util.Optional;

      class A {
          Optional<String> foo() {
              return Optional.empty();
          }
      }
    language: java
- description: ''
  sources:
  - before: |
      import com.google.common.base.Optional;

      class A {
          String foo(Optional<String> optional) {
              try {
                  return optional.get();
              } catch (IllegalStateException e) {
                  return "";
              }
          }
      }
    after: |
      import java.util.Optional;

      class A {
          String foo(Optional<String> optional) {
              try {
                  return optional.get();
              } catch (NoSuchElementException e) {
                  return "";
              }
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.guava.NoGuavaAtomicsNewReference
examples:
- description: ''
  sources:
  - before: |
      import com.google.common.util.concurrent.Atomics;

      class Test {
          Object o1 = Atomics.newReference();
          Object o2 = Atomics.newReference(0);
      }
    after: |
      import java.util.concurrent.atomic.AtomicReference;

      class Test {
          Object o1 = new AtomicReference<>();
          Object o2 = new AtomicReference<>(0);
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.guava.NoGuavaCreateTempDir
examples:
- description: ''
  sources:
  - before: |
      import java.io.File;
      import java.io.IOException;
      import com.google.common.io.Files;

      class A {
          void doSomething() throws IOException {
              File dir = Files.createTempDir();
              dir.createNewFile();
          }
          void doSomethingElse() throws Exception {
              File dir = Files.createTempDir();
              dir.createNewFile();
          }
      }
    after: |
      import java.io.File;
      import java.io.IOException;
      import java.nio.file.Files;

      class A {
          void doSomething() throws IOException {
              File dir = Files.createTempDirectory(null).toFile();
              dir.createNewFile();
          }
          void doSomethingElse() throws Exception {
              File dir = Files.createTempDirectory(null).toFile();
              dir.createNewFile();
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.guava.NoGuavaDirectExecutor
examples:
- description: ''
  sources:
  - before: |
      import java.util.concurrent.Executor;
      import com.google.common.util.concurrent.MoreExecutors;

      class Test {
          Executor executor = MoreExecutors.directExecutor();
      }
    after: |
      import java.util.concurrent.Executor;

      class Test {
          Executor executor = Runnable::run;
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.guava.NoGuavaImmutableSetOf
examples:
- description: ''
  sources:
  - before: |
      import java.util.Set;
      import com.google.common.collect.ImmutableSet;

      class Test {
          Set<String> m = ImmutableSet.of("A", "B", "C", "D");
      }
    after: |
      import java.util.Set;

      class Test {
          Set<String> m = Set.of("A", "B", "C", "D");
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.guava.NoGuavaListsNewArrayList
examples:
- description: ''
  sources:
  - before: |
      import com.google.common.collect.*;

      import java.util.List;

      class Test {
          List<Integer> cardinalsWorldSeries = Lists.newArrayList();
      }
    after: |
      import java.util.ArrayList;
      import java.util.List;

      class Test {
          List<Integer> cardinalsWorldSeries = new ArrayList<>();
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.guava.NoGuavaListsNewCopyOnWriteArrayList
examples:
- description: ''
  sources:
  - before: |
      import com.google.common.collect.*;

      import java.util.List;

      class Test {
          List<Integer> cardinalsWorldSeries = Lists.newCopyOnWriteArrayList();
      }
    after: |
      import java.util.List;
      import java.util.concurrent.CopyOnWriteArrayList;

      class Test {
          List<Integer> cardinalsWorldSeries = new CopyOnWriteArrayList<>();
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.guava.NoGuavaListsNewLinkedList
examples:
- description: ''
  sources:
  - before: |
      import com.google.common.collect.*;

      import java.util.List;

      class Test {
          List<Integer> cardinalsWorldSeries = Lists.newLinkedList();
      }
    after: |
      import java.util.LinkedList;
      import java.util.List;

      class Test {
          List<Integer> cardinalsWorldSeries = new LinkedList<>();
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.guava.NoGuavaMapsNewHashMap
examples:
- description: ''
  sources:
  - before: |
      import com.google.common.collect.*;
      import java.util.Map;

      class Test {
          Map<Integer, Integer> cardinalsWorldSeries = Maps.newHashMap();
      }
    after: |
      import java.util.HashMap;
      import java.util.Map;

      class Test {
          Map<Integer, Integer> cardinalsWorldSeries = new HashMap<>();
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.guava.NoGuavaMapsNewLinkedHashMap
examples:
- description: ''
  sources:
  - before: |
      import com.google.common.collect.*;

      import java.util.Map;

      class Test {
          Map<Integer, Integer> cardinalsWorldSeries = Maps.newLinkedHashMap();
      }
    after: |
      import java.util.LinkedHashMap;
      import java.util.Map;

      class Test {
          Map<Integer, Integer> cardinalsWorldSeries = new LinkedHashMap<>();
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.guava.NoGuavaMapsNewTreeMap
examples:
- description: ''
  sources:
  - before: |
      import com.google.common.collect.*;
      import java.util.Map;

      class Test {
          Map<Integer, Integer> cardinalsWorldSeries = Maps.newTreeMap();
      }
    after: |
      import java.util.Map;
      import java.util.TreeMap;

      class Test {
          Map<Integer, Integer> cardinalsWorldSeries = new TreeMap<>();
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.guava.NoGuavaPrimitiveAsList
examples:
- description: ''
  sources:
  - before: |
      import com.google.common.primitives.Booleans;
      import java.util.List;

      class Test {
          List<Boolean> bools = Booleans.asList(true, false);
      }
    after: |
      import java.util.Arrays;
      import java.util.List;

      class Test {
          List<Boolean> bools = Arrays.asList(true, false);
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.guava.NoGuavaRefasterRecipes
examples:
- description: ''
  sources:
  - before: |
      import com.google.common.base.Preconditions;

      class A {
          Object foo(Object obj) {
              return Preconditions.checkNotNull(obj);
          }
      }
    after: |
      import static java.util.Objects.requireNonNull;

      class A {
          Object foo(Object obj) {
              return requireNonNull(obj);
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.guava.NoGuavaSetsNewConcurrentHashSet
examples:
- description: ''
  sources:
  - before: |
      import com.google.common.collect.*;

      import java.util.Set;

      class Test {
          Set<Integer> cardinalsWorldSeries = Sets.newConcurrentHashSet();
      }
    after: |
      import java.util.Collections;
      import java.util.Set;
      import java.util.concurrent.ConcurrentHashMap;

      class Test {
          Set<Integer> cardinalsWorldSeries = Collections.newSetFromMap(new ConcurrentHashMap<>());
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.guava.NoGuavaSetsNewHashSet
examples:
- description: ''
  sources:
  - before: |
      import com.google.common.collect.*;

      import java.util.Set;

      class Test {
          Set<Integer> cardinalsWorldSeries = Sets.newHashSet();
      }
    after: |
      import java.util.HashSet;
      import java.util.Set;

      class Test {
          Set<Integer> cardinalsWorldSeries = new HashSet<>();
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.guava.NoGuavaSetsNewLinkedHashSet
examples:
- description: ''
  sources:
  - before: |
      import com.google.common.collect.*;

      import java.util.Set;

      class Test {
          Set<Integer> cardinalsWorldSeries = Sets.newLinkedHashSet();
      }
    after: |
      import java.util.LinkedHashSet;
      import java.util.Set;

      class Test {
          Set<Integer> cardinalsWorldSeries = new LinkedHashSet<>();
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.guava.NoMapsAndSetsWithExpectedSize
examples:
- description: ''
  sources:
  - before: |
      import com.google.common.collect.Maps;
      import com.google.common.collect.Sets;
      import java.util.Map;
      import java.util.Set;

      class A {
          void method() {
              Map<String, String> a = Maps.newHashMapWithExpectedSize(1);
              Map<String, String> b = Maps.newLinkedHashMapWithExpectedSize(1);
              Set<String> c = Sets.newHashSetWithExpectedSize(1);
              Set<String> d = Sets.newLinkedHashSetWithExpectedSize(1);
          }
      }
    after: |
      import java.util.*;

      class A {
          void method() {
              Map<String, String> a = new HashMap<>(1);
              Map<String, String> b = new LinkedHashMap<>(1);
              Set<String> c = new HashSet<>(1);
              Set<String> d = new LinkedHashSet<>(1);
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.guava.PreferJavaStringJoin
examples:
- description: ''
  sources:
  - before: |
      import com.google.common.base.Joiner;

      class Test {
          String s = Joiner.on(", ").join("a", "b");
      }
    after: |
      class Test {
          String s = String.join(", ", "a", "b");
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.guava.PreferJavaUtilPredicate
examples:
- description: ''
  sources:
  - before: |
      import com.google.common.base.Predicate;

      class A {
          public static Predicate<String> makeStringPredicate() {
              return new Predicate<String>() {
                  @Override
                  public boolean apply(String input) {
                      return input.isEmpty();
                  }
              };
          }
      }
    after: |
      import java.util.function.Predicate;

      class A {
          public static Predicate<String> makeStringPredicate() {
              return new Predicate<String>() {
                  @Override
                  public boolean test(String input) {
                      return input.isEmpty();
                  }
              };
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.io.ReplaceFileInOrOutputStreamFinalizeWithClose
examples:
- description: ''
  sources:
  - before: |
      import java.io.FileInputStream;
      import java.io.IOException;

      class FooBar {
         public void test() throws IOException {
             FileInputStream obj = new FileInputStream("foo");
             obj.finalize();
         }
      }
    after: |
      import java.io.FileInputStream;
      import java.io.IOException;

      class FooBar {
         public void test() throws IOException {
             FileInputStream obj = new FileInputStream("foo");
             obj.close();
         }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.jacoco.UpgradeJaCoCo
examples:
- description: ''
  sources:
  - before: |
      <project>
        <properties>
          <jacoco.version>0.8.1</jacoco.version>
        </properties>
        <groupId>com.mycompany.app</groupId>
        <artifactId>my-app</artifactId>
        <version>1</version>
        <build>
          <plugins>
            <plugin>
              <groupId>org.jacoco</groupId>
              <artifactId>jacoco-maven-plugin</artifactId>
              <version>${jacoco.version}</version>
            </plugin>
          </plugins>
        </build>
      </project>
    path: pom.xml
    language: xml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.jakarta.ApplicationPathWildcardNoLongerAccepted
examples:
- description: ''
  sources:
  - before: |
      import jakarta.ws.rs.ApplicationPath;
      import jakarta.ws.rs.core.Application;
      @ApplicationPath("should-flag/*")
      public class ApplicationPathWithWildcard extends Application {
      }
    after: |
      import jakarta.ws.rs.ApplicationPath;
      import jakarta.ws.rs.core.Application;
      @ApplicationPath("should-flag")
      public class ApplicationPathWithWildcard extends Application {
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.jakarta.EhcacheJavaxToJakarta
examples:
- description: ''
  sources:
  - before: |
      <project>
          <groupId>com.example.ehcache</groupId>
          <artifactId>ehcache-legacy</artifactId>
          <version>1.0.0</version>
          <dependencies>
              <dependency>
                  <groupId>org.ehcache</groupId>
                  <artifactId>ehcache</artifactId>
                  <version>3.9.10</version>
              </dependency>
              <dependency>
                  <groupId>org.ehcache</groupId>
                  <artifactId>ehcache-clustered</artifactId>
                  <version>3.9.10</version>
              </dependency>
              <dependency>
                  <groupId>org.ehcache</groupId>
                  <artifactId>ehcache-transactions</artifactId>
                  <version>3.9.10</version>
              </dependency>
          </dependencies>
      </project>
    after: |
      <project>
          <groupId>com.example.ehcache</groupId>
          <artifactId>ehcache-legacy</artifactId>
          <version>1.0.0</version>
          <dependencies>
              <dependency>
                  <groupId>org.ehcache</groupId>
                  <artifactId>ehcache</artifactId>
                  <version>3.10.8</version>
                  <classifier>jakarta</classifier>
              </dependency>
              <dependency>
                  <groupId>org.ehcache</groupId>
                  <artifactId>ehcache-clustered</artifactId>
                  <version>3.10.8</version>
              </dependency>
              <dependency>
                  <groupId>org.ehcache</groupId>
                  <artifactId>ehcache-transactions</artifactId>
                  <version>3.10.8</version>
                  <classifier>jakarta</classifier>
              </dependency>
          </dependencies>
      </project>
    path: pom.xml
    language: xml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.jakarta.FacesJNDINamesChanged
examples:
- description: ''
  sources:
  - before: |
      <?xml version="1.0" encoding="UTF-8"?>
      <web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd" version="3.1">
          <env-entry>
              <env-entry-name>jsf/ClientSideSecretKey</env-entry-name>
              <env-entry-type>java.lang.String</env-entry-type>
              <env-entry-value>secret</env-entry-value>
          </env-entry>
          <env-entry>
               <env-entry-name>jsf/FlashSecretKey</env-entry-name>
               <env-entry-type>java.lang.String</env-entry-type>
               <env-entry-value>secret</env-entry-value>
           </env-entry>
      </web-app>
    after: |
      <?xml version="1.0" encoding="UTF-8"?>
      <web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd" version="3.1">
          <env-entry>
              <env-entry-name>faces/ClientSideSecretKey</env-entry-name>
              <env-entry-type>java.lang.String</env-entry-type>
              <env-entry-value>secret</env-entry-value>
          </env-entry>
          <env-entry>
               <env-entry-name>faces/FlashSecretKey</env-entry-name>
               <env-entry-type>java.lang.String</env-entry-type>
               <env-entry-value>secret</env-entry-value>
           </env-entry>
      </web-app>
    language: xml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.jakarta.FacesManagedBeansRemoved
examples:
- description: ''
  sources:
  - before: |
      import javax.faces.bean.ApplicationScoped;
      import javax.faces.bean.RequestScoped;
      import javax.faces.bean.SessionScoped;
      import javax.faces.bean.ManagedProperty;
      import javax.faces.bean.NoneScoped;
      import javax.faces.bean.ViewScoped;

      @ApplicationScoped
      @RequestScoped
      @SessionScoped
      @ManagedProperty
      @NoneScoped
      @ViewScoped
      public class ApplicationBean2 {
      }
    after: |
      import jakarta.enterprise.context.ApplicationScoped;
      import jakarta.enterprise.context.Dependent;
      import jakarta.enterprise.context.RequestScoped;
      import jakarta.enterprise.context.SessionScoped;
      import jakarta.faces.annotation.ManagedProperty;
      import jakarta.faces.view.ViewScoped;

      @ApplicationScoped
      @RequestScoped
      @SessionScoped
      @ManagedProperty
      @Dependent
      @ViewScoped
      public class ApplicationBean2 {
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.jakarta.JacksonJavaxToJakarta
examples:
- description: ''
  sources:
  - before: |
      <project>
          <groupId>com.example.jackson</groupId>
          <artifactId>jackson-legacy</artifactId>
          <version>1.0.0</version>
          <dependencies>
              <dependency>
                  <groupId>com.fasterxml.jackson.module</groupId>
                  <artifactId>jackson-module-jaxb-annotations</artifactId>
                  <version>2.12.1</version>
              </dependency>
              <dependency>
                  <groupId>com.fasterxml.jackson.jaxrs</groupId>
                  <artifactId>jackson-jaxrs-cbor-provider</artifactId>
                  <version>2.12.1</version>
              </dependency>
              <dependency>
                  <groupId>com.fasterxml.jackson.jaxrs</groupId>
                  <artifactId>jackson-jaxrs-json-provider</artifactId>
                  <version>2.12.1</version>
              </dependency>
              <dependency>
                  <groupId>com.fasterxml.jackson.jaxrs</groupId>
                  <artifactId>jackson-jaxrs-smile-provider</artifactId>
                  <version>2.12.1</version>
              </dependency>
              <dependency>
                  <groupId>com.fasterxml.jackson.jaxrs</groupId>
                  <artifactId>jackson-jaxrs-xml-provider</artifactId>
                  <version>2.12.1</version>
              </dependency>
              <dependency>
                  <groupId>com.fasterxml.jackson.jaxrs</groupId>
                  <artifactId>jackson-jaxrs-yaml-provider</artifactId>
                  <version>2.12.1</version>
              </dependency>
              <dependency>
                  <groupId>com.fasterxml.jackson.datatype</groupId>
                  <artifactId>jackson-datatype-jsr353</artifactId>
                  <version>2.12.1</version>
              </dependency>
              <dependency>
                  <groupId>org.glassfish</groupId>
                  <artifactId>javax.json</artifactId>
                  <version>1.1.4</version>
              </dependency>
          </dependencies>
      </project>
    after: |
      <project>
          <groupId>com.example.jackson</groupId>
          <artifactId>jackson-legacy</artifactId>
          <version>1.0.0</version>
          <dependencies>
              <dependency>
                  <groupId>com.fasterxml.jackson.module</groupId>
                  <artifactId>jackson-module-jakarta-xmlbind-annotations</artifactId>
                  <version>2.13.5</version>
              </dependency>
              <dependency>
                  <groupId>com.fasterxml.jackson.jakarta.rs</groupId>
                  <artifactId>jackson-jakarta-rs-cbor-provider</artifactId>
                  <version>2.13.5</version>
              </dependency>
              <dependency>
                  <groupId>com.fasterxml.jackson.jakarta.rs</groupId>
                  <artifactId>jackson-jakarta-rs-json-provider</artifactId>
                  <version>2.13.5</version>
              </dependency>
              <dependency>
                  <groupId>com.fasterxml.jackson.jakarta.rs</groupId>
                  <artifactId>jackson-jakarta-rs-smile-provider</artifactId>
                  <version>2.13.5</version>
              </dependency>
              <dependency>
                  <groupId>com.fasterxml.jackson.jakarta.rs</groupId>
                  <artifactId>jackson-jakarta-rs-xml-provider</artifactId>
                  <version>2.13.5</version>
              </dependency>
              <dependency>
                  <groupId>com.fasterxml.jackson.jakarta.rs</groupId>
                  <artifactId>jackson-jakarta-rs-yaml-provider</artifactId>
                  <version>2.13.5</version>
              </dependency>
              <dependency>
                  <groupId>com.fasterxml.jackson.datatype</groupId>
                  <artifactId>jackson-datatype-jakarta-jsonp</artifactId>
                  <version>2.13.5</version>
              </dependency>
              <dependency>
                  <groupId>org.glassfish</groupId>
                  <artifactId>jakarta.json</artifactId>
                  <version>2.0.1</version>
              </dependency>
          </dependencies>
      </project>
    path: pom.xml
    language: xml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.jakarta.JakartaEE10
examples:
- description: ''
  sources:
  - before: |
      import javax.jms.*;

      @JMSDestinationDefinition(name = "Testing",
                  interfaceName = "javax.jms.Topic",
                  destinationName = "Testing")
      class Test {
      }
    after: |
      import jakarta.jms.*;

      @JMSDestinationDefinition(name = "Testing",
                  interfaceName = "jakarta.jms.Topic",
                  destinationName = "Testing")
      class Test {
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.jakarta.JakartaFacesXhtml
examples:
- description: ''
  sources:
  - before: |
      <?xml version="1.0" encoding="UTF-8"?>
      <ui:composition
              xmlns="http://www.w3.org/1999/xhtml"
              xmlns:f="http://java.sun.com/jsf/core"
              xmlns:h="http://java.sun.com/jsf/html"
              xmlns:ui="http://java.sun.com/jsf/facelets"
              xmlns:c="http://java.sun.com/jsp/jstl/core"
              xmlns:p="http://primefaces.org/ui"
              xmlns:pe="http://primefaces.org/ui/extensions">
      <script src="https://www.gstatic.com/charts/loader.js"></script>
      <p:outputPanel id="container" layout="block">
          <h:panelGrid columns="4">
              <p:inputText converter="javax.faces.Integer" value="#{basicGChartController.mushrooms}" />
              <p:inputText converter="javax.faces.Integer" value="#{basicGChartController.onions}" />
          </h:panelGrid>
          <c:forEach items="#{sheetDynamicController.hoursOfDay}" var="hourOfDay" varStatus="status">
                  <pe:sheetcolumn styleClass="htRight #{row.cells[status.index].style}"
                                  headerText="#{hourOfDay}"
                                  value="#{row.cells[status.index].value}"
                                  readonlyCell="#{row.readOnly}"
                                  colType="numeric">
                      <f:converter converterId="javax.faces.Integer"/>
                  </pe:sheetcolumn>
          </c:forEach>
      </p:outputPanel>
      </ui:composition>
    after: |
      <?xml version="1.0" encoding="UTF-8"?>
      <ui:composition
              xmlns="http://www.w3.org/1999/xhtml"
              xmlns:f="jakarta.faces.core"
              xmlns:h="jakarta.faces.html"
              xmlns:ui="jakarta.faces.facelets"
              xmlns:c="jakarta.tags.core"
              xmlns:p="primefaces"
              xmlns:pe="primefaces.extensions">
      <script src="https://www.gstatic.com/charts/loader.js"></script>
      <p:outputPanel id="container" layout="block">
          <h:panelGrid columns="4">
              <p:inputText converter="jakarta.faces.Integer" value="#{basicGChartController.mushrooms}" />
              <p:inputText converter="jakarta.faces.Integer" value="#{basicGChartController.onions}" />
          </h:panelGrid>
          <c:forEach items="#{sheetDynamicController.hoursOfDay}" var="hourOfDay" varStatus="status">
                  <pe:sheetcolumn styleClass="htRight #{row.cells[status.index].style}"
                                  headerText="#{hourOfDay}"
                                  value="#{row.cells[status.index].value}"
                                  readonlyCell="#{row.readOnly}"
                                  colType="numeric">
                      <f:converter converterId="jakarta.faces.Integer"/>
                  </pe:sheetcolumn>
          </c:forEach>
      </p:outputPanel>
      </ui:composition>
    language: xml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.jakarta.JavaxBeanValidationXmlToJakartaBeanValidationXml
examples:
- description: ''
  sources:
  - before: |
      <?xml version="1.0" encoding="UTF-8"?>
      <validation-config
           xmlns="http://xmlns.jcp.org/xml/ns/validation/configuration"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/validation/configuration
           http://xmlns.jcp.org/xml/ns/validation/configuration/validation-configuration2.0.xsd"
           version="2.0">

          <default-provider>javax.acme.ValidationProvider</default-provider>

          <message-interpolator>javax.acme.MessageInterpolator</message-interpolator>
          <traversable-resolver>javax.acme.TraversableResolver</traversable-resolver>
          <constraint-validator-factory>
              javax.acme.ConstraintValidatorFactory
          </constraint-validator-factory>
          <parameter-name-provider>javax.acme.ParameterNameProvider</parameter-name-provider>

          <executable-validation enabled="true">
              <default-validated-executable-types>
                  <executable-type>CONSTRUCTORS</executable-type>
                  <executable-type>NON_GETTER_METHODS</executable-type>
                  <executable-type>GETTER_METHODS</executable-type>
              </default-validated-executable-types>
          </executable-validation>

          <constraint-mapping>META-INF/validation/constraints-car.xml</constraint-mapping>

          <property name="javax.validator.fail_fast">false</property>
      </validation-config>
    after: |
      <?xml version="1.0" encoding="UTF-8"?>
      <validation-config
           xmlns="https://jakarta.ee/xml/ns/jakartaee"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/validation/configuration/validation-configuration-3.0.xsd"
           version="3.0">

          <default-provider>jakarta.acme.ValidationProvider</default-provider>

          <message-interpolator>jakarta.acme.MessageInterpolator</message-interpolator>
          <traversable-resolver>jakarta.acme.TraversableResolver</traversable-resolver>
          <constraint-validator-factory>
              jakarta.acme.ConstraintValidatorFactory
          </constraint-validator-factory>
          <parameter-name-provider>jakarta.acme.ParameterNameProvider</parameter-name-provider>

          <executable-validation enabled="true">
              <default-validated-executable-types>
                  <executable-type>CONSTRUCTORS</executable-type>
                  <executable-type>NON_GETTER_METHODS</executable-type>
                  <executable-type>GETTER_METHODS</executable-type>
              </default-validated-executable-types>
          </executable-validation>

          <constraint-mapping>META-INF/validation/constraints-car.xml</constraint-mapping>

          <property name="jakarta.validator.fail_fast">false</property>
      </validation-config>
    language: xml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.jakarta.JavaxBeansXmlToJakartaBeansXml
examples:
- description: ''
  sources:
  - before: |
      <?xml version="1.0" encoding="UTF-8"?>
      <beans xmlns="http://java.sun.com/xml/ns/javaee"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="https://jakarta.ee/xml/ns/jakarXXtaee https://jakarta.ee/xml/ns/jakartaee/beans111_3_0.xsd">
      </beans>
    after: |
      <?xml version="1.0" encoding="UTF-8"?>
      <beans xmlns="https://jakarta.ee/xml/ns/jakartaee"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/beans_4_0.xsd">
      </beans>
    language: xml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.jakarta.JavaxEjbJarXmlToJakartaEjbJarXml
examples:
- description: ''
  sources:
  - before: |
      <?xml version="1.0" encoding="UTF-8"?>
      <ejb-jar xmlns="http://java.sun.com/xml/ns/javaee"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://java.sun.com/xml/ns/javaee  http://java.sun.com/xml/ns/javaee/ejb-jar_3_0.xsd"
          version="3.0">
          <enterprise-beans>
              <session>
                  <ejb-name>HelloSessionBean</ejb-name>
                  <mapped-name>ejb/HelloSessionBean</mapped-name>
                  <business-local>com.mydomain.HelloSessionBeanLocal</business-local>
                  <business-remote>com.mydomain.HelloSessionBeanRemote</business-remote>
                  <ejb-class>com.mydomain.HelloSessionBean</ejb-class>
                  <session-type>Stateless</session-type>
                  <transaction-type>Container</transaction-type>
              </session>
              <message-driven>
                  <ejb-name>MessageBean</ejb-name>
                  <ejb-class>samples.mdb.ejb.MessageBean</ejb-class>
                  <transaction-type>Container</transaction-type>
                  <message-driven-destination>
                      <destination-type>javax.jms.Queue</destination-type>
                  </message-driven-destination>
                  <resource-ref>
                      <res-ref-name>jms/QueueConnectionFactory</res-ref-name>
                      <res-type>javax.jms.QueueConnectionFactory</res-type>
                      <res-auth>Container</res-auth>
                  </resource-ref>
              </message-driven>
              <assembly-descriptor>
                  <container-transaction>
                      <method>
                          <ejb-name>MessageBean</ejb-name>
                          <method-intf>Bean</method-intf>
                          <method-name>onMessage</method-name>
                          <method-params>
                              <method-param>javax.jms.Message</method-param>
                          </method-params>
                      </method>
                      <trans-attribute>NotSupported</trans-attribute>
                  </container-transaction>
              </assembly-descriptor>
          </enterprise-beans>
      </ejb-jar>
    after: |
      <?xml version="1.0" encoding="UTF-8"?>
      <ejb-jar xmlns="https://jakarta.ee/xml/ns/jakartaee"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/ejb-jar_4_0.xsd"
          version="4.0">
          <enterprise-beans>
              <session>
                  <ejb-name>HelloSessionBean</ejb-name>
                  <mapped-name>ejb/HelloSessionBean</mapped-name>
                  <business-local>com.mydomain.HelloSessionBeanLocal</business-local>
                  <business-remote>com.mydomain.HelloSessionBeanRemote</business-remote>
                  <ejb-class>com.mydomain.HelloSessionBean</ejb-class>
                  <session-type>Stateless</session-type>
                  <transaction-type>Container</transaction-type>
              </session>
              <message-driven>
                  <ejb-name>MessageBean</ejb-name>
                  <ejb-class>samples.mdb.ejb.MessageBean</ejb-class>
                  <transaction-type>Container</transaction-type>
                  <message-driven-destination>
                      <destination-type>jakarta.jms.Queue</destination-type>
                  </message-driven-destination>
                  <resource-ref>
                      <res-ref-name>jms/QueueConnectionFactory</res-ref-name>
                      <res-type>jakarta.jms.QueueConnectionFactory</res-type>
                      <res-auth>Container</res-auth>
                  </resource-ref>
              </message-driven>
              <assembly-descriptor>
                  <container-transaction>
                      <method>
                          <ejb-name>MessageBean</ejb-name>
                          <method-intf>Bean</method-intf>
                          <method-name>onMessage</method-name>
                          <method-params>
                              <method-param>jakarta.jms.Message</method-param>
                          </method-params>
                      </method>
                      <trans-attribute>NotSupported</trans-attribute>
                  </container-transaction>
              </assembly-descriptor>
          </enterprise-beans>
      </ejb-jar>
    language: xml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.jakarta.JavaxFacesConfigXmlToJakartaFacesConfigXml
examples:
- description: ''
  sources:
  - before: |
      <?xml version="1.0" encoding="UTF-8"?>
      <faces-config xmlns="http://java.sun.com/xml/ns/javaee"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-facesconfig_1.0.xsd"
                    version="1.0">
          <render-kit>
              <renderer>
                  <component-family>javax.faces.Output</component-family>
                  <renderer-type>javax.faces.Head</renderer-type>
                  <renderer-class>org.apache.myfaces.renderkit.html.HtmlHeadRenderer</renderer-class>
              </renderer>
          </render-kit>
      </faces-config>
    after: |
      <?xml version="1.0" encoding="UTF-8"?>
      <faces-config xmlns="https://jakarta.ee/xml/ns/jakartaee"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-facesconfig_4_0.xsd"
                    version="4.0">
          <render-kit>
              <renderer>
                  <component-family>jakarta.faces.Output</component-family>
                  <renderer-type>jakarta.faces.Head</renderer-type>
                  <renderer-class>org.apache.myfaces.renderkit.html.HtmlHeadRenderer</renderer-class>
              </renderer>
          </render-kit>
      </faces-config>
    language: xml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.jakarta.JavaxFacesTagLibraryXmlToJakartaFacesTagLibraryXml
examples:
- description: ''
  sources:
  - before: |
      <?xml version="1.0" encoding="UTF-8"?>
      <facelet-taglib version="1.0"
                      xmlns="http://java.sun.com/xml/ns/javaee"
                      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                      xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-facelettaglibrary_1.0.xsd">
          <function>
              <function-name>getFileContent</function-name>
              <function-class>javax.util.ShowcaseUtil</function-class>
              <function-signature>java.lang.String getFileContent(java.lang.String)</function-signature>
          </function>
      </facelet-taglib>
    after: |
      <?xml version="1.0" encoding="UTF-8"?>
      <facelet-taglib version="4.0"
                      xmlns="https://jakarta.ee/xml/ns/jakartaee"
                      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                      xsi:schemaLocation="https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-facelettaglibrary_4_0.xsd">
          <function>
              <function-name>getFileContent</function-name>
              <function-class>jakarta.util.ShowcaseUtil</function-class>
              <function-signature>java.lang.String getFileContent(java.lang.String)</function-signature>
          </function>
      </facelet-taglib>
    language: xml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.jakarta.JavaxInjectMigrationToJakartaInject
examples:
- description: ''
  sources:
  - before: |
      <project>
          <modelVersion>4.0.0</modelVersion>
          <groupId>com.example</groupId>
          <artifactId>demo</artifactId>
          <version>0.0.1-SNAPSHOT</version>
          <dependencies>
              <dependency>
                    <groupId>javax.inject</groupId>
                    <artifactId>javax.inject</artifactId>
                    <version>1</version>
              </dependency>
          </dependencies>
      </project>
    path: pom.xml
    language: xml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.jakarta.JavaxMigrationToJakarta
examples:
- description: ''
  sources:
  - before: |
      import javax.xml.bind.annotation.A;
      public class B {
      }
    after: |
      import jakarta.xml.bind.annotation.A;
      public class B {
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.jakarta.JavaxTransactionMigrationToJakartaTransaction
examples:
- description: ''
  sources:
  - before: |
      import javax.transaction.Transactional;
      @Transactional
      public class A {
          public void foo() {}
      }
    after: |
      import jakarta.transaction.Transactional;
      @Transactional
      public class A {
          public void foo() {}
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.jakarta.JavaxWebFragmentXmlToJakartaWebFragmentXml
examples:
- description: ''
  sources:
  - before: |
      <?xml version="1.0" encoding="UTF-8"?>
      <web-fragment xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    version="3.0"
                    xmlns="http://java.sun.com/xml/ns/javaee"
                    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-fragment_3_0.xsd">
             <listener>
                 <listener-class>javax.faces.UploadedFileCleanerListener</listener-class>
             </listener>
      </web-fragment>
    after: |
      <?xml version="1.0" encoding="UTF-8"?>
      <web-fragment xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    version="5.0"
                    xmlns="https://jakarta.ee/xml/ns/jakartaee"
                    xsi:schemaLocation="https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-fragment_5_0.xsd">
             <listener>
                 <listener-class>jakarta.faces.UploadedFileCleanerListener</listener-class>
             </listener>
      </web-fragment>
    language: xml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.jakarta.JavaxWebXmlToJakartaWebXml
examples:
- description: ''
  sources:
  - before: |
      <?xml version="1.0" encoding="UTF-8"?>
      <web-app xmlns="http://java.sun.com/xml/ns/javaee"
               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
               xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_0.xsd"
               version="2.0">
          <context-param>
              <param-name>javax.faces.PROJECT_STAGE</param-name>
              <param-value>Production</param-value>
          </context-param>
      </web-fragment>
    after: |
      <?xml version="1.0" encoding="UTF-8"?>
      <web-app xmlns="https://jakarta.ee/xml/ns/jakartaee"
               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
               xsi:schemaLocation="https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_6_0.xsd"
               version="6.0">
          <context-param>
              <param-name>jakarta.faces.PROJECT_STAGE</param-name>
              <param-value>Production</param-value>
          </context-param>
      </web-fragment>
    language: xml
- description: ''
  sources:
  - before: |
      <?xml version="1.0" encoding="UTF-8"?>
      <web-app xmlns="http://java.sun.com/xml/ns/javaee"
               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
               xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_0.xsd"
               version="2.0">
          <context-param>
              <param-name>javax.faces.PROJECT_STAGE</param-name>
              <param-value>Production</param-value>
          </context-param>
          <resource-ref>
             <res-ref-name>myDataSource</res-ref-name>
             <res-type>javax.sql.DataSource</res-type>
             <res-auth>CONTAINER</res-auth>
          </resource-ref>
      </web-fragment>
    after: |
      <?xml version="1.0" encoding="UTF-8"?>
      <web-app xmlns="https://jakarta.ee/xml/ns/jakartaee"
               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
               xsi:schemaLocation="https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_6_0.xsd"
               version="6.0">
          <context-param>
              <param-name>jakarta.faces.PROJECT_STAGE</param-name>
              <param-value>Production</param-value>
          </context-param>
          <resource-ref>
             <res-ref-name>myDataSource</res-ref-name>
             <res-type>javax.sql.DataSource</res-type>
             <res-auth>CONTAINER</res-auth>
          </resource-ref>
      </web-fragment>
    language: xml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.jakarta.RemovalsServletJakarta10
examples:
- description: ''
  sources:
  - before: |
      import java.io.IOException;

      import jakarta.servlet.ServletContext;
      import jakarta.servlet.ServletException;
      import jakarta.servlet.SingleThreadModel;
      import jakarta.servlet.UnavailableException;
      import jakarta.servlet.http.HttpServlet;
      import jakarta.servlet.http.HttpServletRequest;
      import jakarta.servlet.http.HttpServletRequestWrapper;
      import jakarta.servlet.http.HttpServletResponse;
      import jakarta.servlet.http.HttpServletResponseWrapper;
      import jakarta.servlet.http.HttpSession;
      import jakarta.servlet.http.HttpSessionContext;
      import jakarta.servlet.http.HttpUtils;

      class TestJakarta extends HttpServlet implements SingleThreadModel {
          protected void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
              req.isRequestedSessionIdFromUrl();

              res.encodeUrl("");
              res.encodeRedirectUrl("");

              res.setStatus(0,  "");

              res.setStatus(0);

              HttpServletRequestWrapper reqWrapper = new HttpServletRequestWrapper(req);
              reqWrapper.isRequestedSessionIdFromUrl();

              HttpServletResponseWrapper resWrapper = new HttpServletResponseWrapper(res);

              resWrapper.encodeUrl("");
              resWrapper.encodeRedirectUrl("");

              resWrapper.setStatus(0,  "");

              HttpSession httpSession = req.getSession();
              httpSession.getSessionContext();
              httpSession.getValue("");
              httpSession.getValueNames();
              httpSession.putValue("", null);
              httpSession.removeValue("");

              ServletContext servletContext = getServletContext();

              servletContext.getServlet("");
              servletContext.getServlets();
              servletContext.getServletNames();

              servletContext.log(null, "");
          }
      }
    after: |
      import java.io.IOException;

      import jakarta.servlet.ServletContext;
      import jakarta.servlet.ServletException;
      import jakarta.servlet.SingleThreadModel;
      import jakarta.servlet.UnavailableException;
      import jakarta.servlet.http.HttpServlet;
      import jakarta.servlet.http.HttpServletRequest;
      import jakarta.servlet.http.HttpServletRequestWrapper;
      import jakarta.servlet.http.HttpServletResponse;
      import jakarta.servlet.http.HttpServletResponseWrapper;
      import jakarta.servlet.http.HttpSession;
      import jakarta.servlet.http.HttpSessionContext;
      import jakarta.servlet.http.HttpUtils;

      class TestJakarta extends HttpServlet implements SingleThreadModel {
          protected void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
              req.isRequestedSessionIdFromURL();

              res.encodeURL("");
              res.encodeRedirectURL("");

              res.setStatus(0);

              res.setStatus(0);

              HttpServletRequestWrapper reqWrapper = new HttpServletRequestWrapper(req);
              reqWrapper.isRequestedSessionIdFromURL();

              HttpServletResponseWrapper resWrapper = new HttpServletResponseWrapper(res);

              resWrapper.encodeURL("");
              resWrapper.encodeRedirectURL("");

              resWrapper.setStatus(0);

              HttpSession httpSession = req.getSession();
              httpSession.getSessionContext();
              httpSession.getAttribute("");
              httpSession.getAttributeNames();
              httpSession.setAttribute("", null);
              httpSession.removeAttribute("");

              ServletContext servletContext = getServletContext();

              servletContext.getServlet("");
              servletContext.getServlets();
              servletContext.getServletNames();

              servletContext.log("", null);
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.jakarta.RemoveBeanIsNullable
examples:
- description: ''
  sources:
  - before: |
      import jakarta.enterprise.inject.spi.Bean;

      class Test {
          void test(Bean<?> bean) {
              if (bean.isNullable()) {
                  System.out.println("is null");
              } else {
                  System.out.println("not null");
              }
          }
      }
    after: |
      import jakarta.enterprise.inject.spi.Bean;

      class Test {
          void test(Bean<?> bean) {
              System.out.println("not null");
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.jakarta.RemovedIsParmetersProvidedMethod
examples:
- description: ''
  sources:
  - before: |
      package com.test;

      import jakarta.el.MethodExpression;

      public class Test {
          void test(MethodExpression methodExpression){
              if(methodExpression.isParmetersProvided()){
                  System.out.println("test");
              }
          }
      }
    after: |
      package com.test;

      import jakarta.el.MethodExpression;

      public class Test {
          void test(MethodExpression methodExpression){
              if(methodExpression.isParametersProvided()){
                  System.out.println("test");
              }
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.jakarta.RemovedJakartaFacesExpressionLanguageClasses
examples:
- description: ''
  sources:
  - before: |
      package com.test;

      import jakarta.faces.el.MethodBinding;
      import jakarta.faces.el.PropertyResolver;
      import jakarta.faces.el.ValueBinding;

      public class Test {

           public void testJakarta() {
                MethodBinding methodBinding = null;
                PropertyResolver propertyResolver = null;
                ValueBinding valueBinding = null;
           }
      }
    after: |
      package com.test;

      import jakarta.el.ELResolver;
      import jakarta.el.MethodExpression;
      import jakarta.el.ValueExpression;

      public class Test {

           public void testJakarta() {
                MethodExpression methodBinding = null;
                ELResolver propertyResolver = null;
                ValueExpression valueBinding = null;
           }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.jakarta.RemovedJakartaFacesResourceResolver
examples:
- description: ''
  sources:
  - before: |
      package com.test;
      import java.net.URL;

      import jakarta.faces.application.StateManager;
      import jakarta.faces.component.UIViewRoot;
      import jakarta.faces.context.FacesContext;
      import jakarta.faces.view.facelets.ResourceResolver;

      public class ResourceResolverParent extends ResourceResolver {

          @Override
          public URL resolveUrl(String arg0) {
              // TODO Auto-generated method stub
              return null;
          }
      }
    after: |
      package com.test;
      import java.net.URL;

      import jakarta.faces.application.ResourceHandler;
      import jakarta.faces.application.StateManager;
      import jakarta.faces.component.UIViewRoot;
      import jakarta.faces.context.FacesContext;

      public class ResourceResolverParent extends ResourceHandler {

          @Override
          public URL resolveUrl(String arg0) {
              // TODO Auto-generated method stub
              return null;
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.jakarta.RemovedSOAPElementFactory
examples:
- description: ''
  sources:
  - before: |
      package com.test;

      import jakarta.xml.soap.Name;
      import jakarta.xml.soap.SOAPElementFactory;
      import jakarta.xml.soap.SOAPEnvelope;

      public class Test {
          void test(SOAPEnvelope envelope) {
              String str1 = "test";
              String str2 = "t2";
              String str3 = "t3";
              Name n = envelope.createName("GetLastTradePrice", "WOMBAT", "http://www.abc.org/trader");
              SOAPElementFactory sfe = SOAPElementFactory.newInstance();
              sfe.create(str1);
              sfe.create(str1, str2, str3);
              sfe.create(n);
          }
      }
    after: |
      package com.test;

      import jakarta.xml.soap.Name;
      import jakarta.xml.soap.SOAPEnvelope;
      import jakarta.xml.soap.SOAPFactory;

      public class Test {
          void test(SOAPEnvelope envelope) {
              String str1 = "test";
              String str2 = "t2";
              String str3 = "t3";
              Name n = envelope.createName("GetLastTradePrice", "WOMBAT", "http://www.abc.org/trader");
              SOAPFactory sfe = SOAPFactory.newInstance();
              sfe.createElement(str1);
              sfe.createElement(str1, str2, str3);
              sfe.createElement(n);
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.jakarta.RemovedStateManagerMethods
examples:
- description: ''
  sources:
  - before: |
      import jakarta.faces.application.StateManager;
      import jakarta.faces.component.UIViewRoot;
      import jakarta.faces.context.FacesContext;

      class StateManagerParent extends StateManager {

          @Override
          public UIViewRoot restoreView(FacesContext arg0, String arg1, String arg2) {
              UIViewRoot uv = null;
              super.getComponentStateToSave(arg0);
              super.getTreeStructureToSave(arg0);
              super.restoreComponentState(arg0, uv, arg2);
              super.restoreTreeStructure(arg0, arg1, arg2);
              return null;
          }
      }
    after: |
      import jakarta.faces.component.UIViewRoot;
      import jakarta.faces.context.FacesContext;
      import jakarta.faces.view.StateManagementStrategy;

      class StateManagerParent extends StateManagementStrategy {

          @Override
          public UIViewRoot restoreView(FacesContext arg0, String arg1, String arg2) {
              UIViewRoot uv = null;
              super.saveView(arg0);
              super.saveView(arg0);
              super.restoreView(arg0, uv, arg2);
              super.restoreView(arg0, arg1, arg2);
              return null;
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.jakarta.RemovedUIComponentConstant
examples:
- description: ''
  sources:
  - before: |
      import jakarta.faces.component.UIComponent;

      class Bar {
          void foo() {
              String str = UIComponent.CURRENT_COMPONENT;
              String str2 = UIComponent.CURRENT_COMPOSITE_COMPONENT;
              System.out.println(str);
              System.out.println(str2);
          }
      }
    after: |
      import jakarta.faces.component.UIComponent;

      class Bar {
          void foo() {
              String str = UIComponent.getCurrentComponent();
              String str2 = UIComponent.getCurrentCompositeComponent();
              System.out.println(str);
              System.out.println(str2);
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.jakarta.ServletCookieBehaviorChangeRFC6265
examples:
- description: ''
  sources:
  - before: |
      package com.test;
      import jakarta.servlet.ServletContext;
      import jakarta.servlet.SessionCookieConfig;
      import jakarta.servlet.http.HttpServlet;

      import jakarta.servlet.http.Cookie;

      public class TestJakarta extends HttpServlet {

          public void test() {
                Cookie cookie = new Cookie("test", "cookie");
                cookie.setComment("comment");
                cookie.getComment();
                cookie.setVersion(1);
                cookie.getVersion();

                ServletContext servletContext = getServletContext();
                SessionCookieConfig config = servletContext.getSessionCookieConfig();
                config.getComment();
                config.setComment("comment");
          }
      }
    after: |
      package com.test;
      import jakarta.servlet.ServletContext;
      import jakarta.servlet.SessionCookieConfig;
      import jakarta.servlet.http.HttpServlet;

      import jakarta.servlet.http.Cookie;

      public class TestJakarta extends HttpServlet {

          public void test() {
                Cookie cookie = new Cookie("test", "cookie");

                ServletContext servletContext = getServletContext();
                SessionCookieConfig config = servletContext.getSessionCookieConfig();
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.jakarta.UpdateAddAnnotatedTypes
examples:
- description: ''
  sources:
  - before: |
      import jakarta.enterprise.inject.spi.AnnotatedType;
      import jakarta.enterprise.inject.spi.BeanManager;
      import jakarta.enterprise.inject.spi.BeforeBeanDiscovery;

      class Foo {
        void bar(BeforeBeanDiscovery beforeBeanDiscovery, BeanManager beanManager) {
          AnnotatedType<String> producerType = beanManager.createAnnotatedType(String.class);
          beforeBeanDiscovery.addAnnotatedType(producerType); // Flag this one
          beforeBeanDiscovery.addAnnotatedType(producerType, "my unique id"); // Not this one
          beforeBeanDiscovery.addAnnotatedType(String.class, "my other unique id"); // Not this one
        }
      }
    after: |
      import jakarta.enterprise.inject.spi.AnnotatedType;
      import jakarta.enterprise.inject.spi.BeanManager;
      import jakarta.enterprise.inject.spi.BeforeBeanDiscovery;

      class Foo {
        void bar(BeforeBeanDiscovery beforeBeanDiscovery, BeanManager beanManager) {
          AnnotatedType<String> producerType = beanManager.createAnnotatedType(String.class);
          beforeBeanDiscovery.addAnnotatedType(producerType, null); // Flag this one
          beforeBeanDiscovery.addAnnotatedType(producerType, "my unique id"); // Not this one
          beforeBeanDiscovery.addAnnotatedType(String.class, "my other unique id"); // Not this one
        }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.jakarta.UpdateApacheWSSecurityPackages
examples:
- description: ''
  sources:
  - before: |
      import org.apache.ws.security.WSSecurityException;
      import org.apache.ws.security.components.crypto.CryptoBase;
      class Test {
          void foo() {
              WSSecurityException x = new WSSecurityException(1,"");
              CryptoBase base = null;
          }
      }
    after: |
      import org.apache.wss4j.common.ext.WSSecurityException;
      import org.apache.wss4j.common.ext.components.crypto.CryptoBase;
      class Test {
          void foo() {
              WSSecurityException x = new WSSecurityException(1,"");
              CryptoBase base = null;
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.jakarta.UpdateBeanManagerMethods
examples:
- description: ''
  sources:
  - before: |
      import jakarta.enterprise.inject.spi.BeanManager;
      import jakarta.enterprise.inject.spi.BeforeBeanDiscovery;
      import java.util.Set;

      class Foo {
          void bar(BeanManager beanManager, BeforeBeanDiscovery beforeBeanDiscovery) {
              beanManager.fireEvent(beforeBeanDiscovery);
          }
      }
    after: |
      import jakarta.enterprise.inject.spi.BeanManager;
      import jakarta.enterprise.inject.spi.BeforeBeanDiscovery;
      import java.util.Set;

      class Foo {
          void bar(BeanManager beanManager, BeforeBeanDiscovery beforeBeanDiscovery) {
              beanManager.getEvent().fire(beforeBeanDiscovery);
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.jakarta.UpdateGetRealPath
examples:
- description: ''
  sources:
  - before: |
      import jakarta.servlet.http.HttpServletRequest;
      import jakarta.servlet.http.HttpServletRequestWrapper;
      class Foo {
          void bar(HttpServletRequest request, HttpServletRequestWrapper wrapper) throws Exception {
              request.getRealPath("");
              wrapper.getRealPath("");
          }
      }
    after: |
      import jakarta.servlet.http.HttpServletRequest;
      import jakarta.servlet.http.HttpServletRequestWrapper;
      class Foo {
          void bar(HttpServletRequest request, HttpServletRequestWrapper wrapper) throws Exception {
              request.getServletContext().getRealPath("");
              wrapper.getServletContext().getRealPath("");
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.jakarta.WsWsocServerContainerDeprecation
examples:
- description: ''
  sources:
  - before: |
      import javax.servlet.http.HttpServletRequest;
      import javax.servlet.http.HttpServletResponse;

      import com.ibm.websphere.wsoc.ServerEndpointConfig;
      import com.ibm.websphere.wsoc.WsWsocServerContainer;

      class Test {
          void doX(HttpServletRequest req, HttpServletResponse res, ServerEndpointConfig sConfig, java.util.Map<String,String> map){
              WsWsocServerContainer.doUpgrade(req, res, sConfig, map);
          }
       }
    after: |
      import javax.servlet.http.HttpServletRequest;
      import javax.servlet.http.HttpServletResponse;

      import com.ibm.websphere.wsoc.ServerEndpointConfig;
      import jakarta.websocket.server.ServerContainer;

      class Test {
          void doX(HttpServletRequest req, HttpServletResponse res, ServerEndpointConfig sConfig, java.util.Map<String,String> map){
              ServerContainer.upgradeHttpToWebSocket(req, res, sConfig, map);
          }
       }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.javaee7.OpenJPAPersistenceProvider
examples:
- description: ''
  sources:
  - before: |
      <?xml version="1.0" encoding="UTF-8"?>
      <persistence xmlns="http://java.sun.com/xml/ns/persistence"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd"
                   version="1.0">
          <persistence-unit name="JPAService">
              <provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>
              <jta-data-source>java:comp/env/jdbc/DB2Connection</jta-data-source>
              <class>my.jpa.Account</class>
          </persistence-unit>
          <persistence-unit name="JPAService1">
              <provider>com.ibm.websphere.persistence.PersistenceProviderImpl</provider>
              <jta-data-source>java:comp/env/jdbc/DB2Connection</jta-data-source>
              <class>my.jpa.Account</class>
          </persistence-unit>
          <persistence-unit name="JPAService2">
              <provider>org.hibernate.ejb.HibernatePersistence</provider>
              <jta-data-source>java:comp/env/jdbc/DB2Connection</jta-data-source>
              <class>my.jpa.Account</class>
          </persistence-unit>
          <persistence-unit name="JPAService3">s
              <provider>com.ibm.websphere.persistence.PersistenceProviderImpl</provider>
              <jta-data-source>java:comp/env/jdbc/DB2Connection</jta-data-source>
              <class>my.jpa.Account</class>
          </persistence-unit>
          <persistence-unit name="JPAService4">
              <provider>com.ibm.websphere.persistence.PersistenceProviderImpl</provider>
          </persistence-unit>
      </persistence>
    after: |
      <?xml version="1.0" encoding="UTF-8"?>
      <persistence xmlns="http://java.sun.com/xml/ns/persistence"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd"
                   version="1.0">
          <persistence-unit name="JPAService">
              <provider>org.eclipse.persistence.jpa.PersistenceProvider</provider>
              <jta-data-source>java:comp/env/jdbc/DB2Connection</jta-data-source>
              <class>my.jpa.Account</class>
          </persistence-unit>
          <persistence-unit name="JPAService1">
              <provider>com.ibm.websphere.persistence.PersistenceProviderImpl</provider>
              <jta-data-source>java:comp/env/jdbc/DB2Connection</jta-data-source>
              <class>my.jpa.Account</class>
          </persistence-unit>
          <persistence-unit name="JPAService2">
              <provider>org.hibernate.ejb.HibernatePersistence</provider>
              <jta-data-source>java:comp/env/jdbc/DB2Connection</jta-data-source>
              <class>my.jpa.Account</class>
          </persistence-unit>
          <persistence-unit name="JPAService3">s
              <provider>com.ibm.websphere.persistence.PersistenceProviderImpl</provider>
              <jta-data-source>java:comp/env/jdbc/DB2Connection</jta-data-source>
              <class>my.jpa.Account</class>
          </persistence-unit>
          <persistence-unit name="JPAService4">
              <provider>com.ibm.websphere.persistence.PersistenceProviderImpl</provider>
          </persistence-unit>
      </persistence>
    language: xml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.javaee8.ApacheDefaultProvider
examples:
- description: ''
  sources:
  - before: |
      <?xml version="1.0" encoding="UTF-8"?>
      <validation-config
          xmlns="http://jboss.org/xml/ns/javax/validation/configuration"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://jboss.org/xml/ns/javax/validation/configuration validation-configuration-1.1.xsd"
          version="1.1">
          <default-provider>org.apache.bval.jsr303.ApacheValidationProvider</default-provider>
          <message-interpolator>org.apache.bval.jsr.DefaultMessageInterpolator</message-interpolator>
          <traversable-resolver>org.apache.bval.jsr.resolver.DefaultTraversableResolver</traversable-resolver>
          <constraint-validator-factory>org.apache.bval.jsr.DefaultConstraintValidatorFactory</constraint-validator-factory>
          <parameter-name-provider>org.apache.bval.jsr.parameter.DefaultParameterNameProvider</parameter-name-provider>
      </validation-config>
    after: |
      <?xml version="1.0" encoding="UTF-8"?>
      <validation-config
          xmlns="http://jboss.org/xml/ns/javax/validation/configuration"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://jboss.org/xml/ns/javax/validation/configuration validation-configuration-1.1.xsd"
          version="1.1">
          <default-provider>org.hibernate.validator.HibernateValidator</default-provider>
          <message-interpolator>org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator</message-interpolator>
          <traversable-resolver>org.hibernate.validator.engine.resolver.DefaultTraversableResolver</traversable-resolver>
          <constraint-validator-factory>org.hibernate.validator.engine.ConstraintValidatorFactoryImpl</constraint-validator-factory>
      </validation-config>
    language: xml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.javaee8.ServletIsRequestedSessionIdFromURL
examples:
- description: ''
  sources:
  - before: |
      import javax.servlet.http.HttpServletRequestWrapper;
      class Foo {
          void bar(HttpServletRequestWrapper foo) {
              foo.isRequestedSessionIdFromUrl();
          }
      }
    after: |
      import javax.servlet.http.HttpServletRequestWrapper;
      class Foo {
          void bar(HttpServletRequestWrapper foo) {
              foo.isRequestedSessionIdFromURL();
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.javax.AddColumnAnnotation
examples:
- description: ''
  sources:
  - before: |
      import java.util.List;

      import javax.persistence.ElementCollection;
      import javax.persistence.Entity;
      import javax.persistence.Id;

      @Entity
      public class ElementCollectionEntity {
          @Id
          private int id;

          @ElementCollection
          private List<String> listofStrings;
      }
    after: |
      import java.util.List;

      import javax.persistence.Column;
      import javax.persistence.ElementCollection;
      import javax.persistence.Entity;
      import javax.persistence.Id;

      @Entity
      public class ElementCollectionEntity {
          @Id
          private int id;

          @Column(name = "element")
          @ElementCollection
          private List<String> listofStrings;
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.javax.AddDefaultConstructorToEntityClass
examples:
- description: ''
  sources:
  - before: |
      import javax.persistence.Entity;
      import javax.persistence.Id;

      @Entity
      public class MissingNoArgConstructorEntity {
          @Id
          private int id;

          public MissingNoArgConstructorEntity(int id) {
              this.id = id;
          }
      }
    after: |
      import javax.persistence.Entity;
      import javax.persistence.Id;

      @Entity
      public class MissingNoArgConstructorEntity {

          public MissingNoArgConstructorEntity() {
          }
          @Id
          private int id;

          public MissingNoArgConstructorEntity(int id) {
              this.id = id;
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.javax.AddScopeToInjectedClass
examples:
- description: ''
  sources:
  - before: |
      package com.sample.service;

      public class Bar {}
    after: |
      package com.sample.service;

      import javax.enterprise.context.Dependent;

      @Dependent
      public class Bar {}
    language: java
  - before: |
      package com.sample;

      import javax.inject.Inject;
      import com.sample.service.Bar;

      public class Foo {

          @Inject
          Bar service;
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.javax.AddTableGenerator
examples:
- description: ''
  sources:
  - before: |
      import javax.persistence.Entity;
      import javax.persistence.GeneratedValue;
      import javax.persistence.GenerationType;
      import javax.persistence.Id;
      import javax.persistence.TableGenerator;

      @Entity
      public class GeneratedValueExample  {
          // flag it
          @Id
          @GeneratedValue(strategy=GenerationType.AUTO)
          private int id;

          // flag it.  Does not require @Id
          @GeneratedValue
          private int id2;

          // flag it even though it has a TableGenerator since GeneratedValue is default
          // A second TableGenerator will be created.
          @TableGenerator(name = "SOME_TABLE", table = "SOME_TABLE", pkColumnName = "ID", valueColumnName = "SEQUENCE_VALUE", pkColumnValue = "0")
          @GeneratedValue
          private int id3;
      }
    after: |
      import javax.persistence.Entity;
      import javax.persistence.GeneratedValue;
      import javax.persistence.GenerationType;
      import javax.persistence.Id;
      import javax.persistence.TableGenerator;

      @Entity
      public class GeneratedValueExample  {
          // flag it
          @Id
          @javax.persistence.TableGenerator(name = "OPENJPA_SEQUENCE_TABLE", table = "OPENJPA_SEQUENCE_TABLE", pkColumnName = "ID", valueColumnName = "SEQUENCE_VALUE", pkColumnValue = "0")
          @GeneratedValue(strategy = javax.persistence.GenerationType.TABLE, generator = "OPENJPA_SEQUENCE_TABLE")
          private int id;

          // flag it.  Does not require @Id
          @GeneratedValue(strategy = javax.persistence.GenerationType.TABLE, generator = "OPENJPA_SEQUENCE_TABLE")
          @javax.persistence.TableGenerator(name = "OPENJPA_SEQUENCE_TABLE", table = "OPENJPA_SEQUENCE_TABLE", pkColumnName = "ID", valueColumnName = "SEQUENCE_VALUE", pkColumnValue = "0")
          private int id2;

          // flag it even though it has a TableGenerator since GeneratedValue is default
          // A second TableGenerator will be created.
          @TableGenerator(name = "SOME_TABLE", table = "SOME_TABLE", pkColumnName = "ID", valueColumnName = "SEQUENCE_VALUE", pkColumnValue = "0")
          @javax.persistence.TableGenerator(name = "OPENJPA_SEQUENCE_TABLE", table = "OPENJPA_SEQUENCE_TABLE", pkColumnName = "ID", valueColumnName = "SEQUENCE_VALUE", pkColumnValue = "0")
          @GeneratedValue(strategy = javax.persistence.GenerationType.TABLE, generator = "OPENJPA_SEQUENCE_TABLE")
          private int id3;
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.javax.AddTransientAnnotationToCollections
examples:
- description: ''
  sources:
  - before: |
      import java.util.Collection;
      import java.util.List;

      import javax.persistence.Entity;
      import javax.persistence.Id;

      @Entity
      public class UnannotatedCollectionEntity {
          @Id
          private int id;

          private Collection collectionField;
          private List listField;
      }
    after: |
      import java.util.Collection;
      import java.util.List;

      import javax.persistence.Entity;
      import javax.persistence.Id;
      import javax.persistence.Transient;

      @Entity
      public class UnannotatedCollectionEntity {
          @Id
          private int id;

          @Transient
          private Collection collectionField;
          @Transient
          private List listField;
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.javax.AddTransientAnnotationToEntity
examples:
- description: ''
  sources:
  - before: |
      import javax.persistence.Entity;
      import javax.persistence.Id;

      @Entity
      public class EntityA {
          @Id
          private int id;

          private EntityB entityReference;
      }
    after: |
      import javax.persistence.Entity;
      import javax.persistence.Id;
      import javax.persistence.Transient;

      @Entity
      public class EntityA {
          @Id
          private int id;

          @Transient
          private EntityB entityReference;
      }
    language: java
  - before: |
      import javax.persistence.Entity;
      import javax.persistence.Id;

      @Entity
      public class EntityB {
          @Id
          private int id;
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.javax.AddTransientAnnotationToPrivateAccessor
examples:
- description: ''
  sources:
  - before: |
      package entities;

      import javax.persistence.Entity;
      import javax.persistence.Id;

      @Entity
      public class PrivateAccessor  {
          private int id;
          private int nonPersistentField;

          @Id
          public int getId() {
              return id;
          }

          private int getNonPersistentField() {
              return nonPersistentField;
          }
      }
    after: |
      package entities;

      import javax.persistence.Entity;
      import javax.persistence.Id;
      import javax.persistence.Transient;

      @Entity
      public class PrivateAccessor  {
          private int id;
          private int nonPersistentField;

          @Id
          public int getId() {
              return id;
          }

          @Transient
          private int getNonPersistentField() {
              return nonPersistentField;
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.javax.HttpSessionInvalidate
examples:
- description: ''
  sources:
  - before: |
      import javax.servlet.http.HttpServletResponse;
      import javax.servlet.http.HttpServletRequest;
      import javax.servlet.http.HttpSession;

      class Foo {
          void logOut(HttpServletRequest req, HttpServletResponse res) {
              HttpSession session = req.getSession(false);
              session.invalidate();
              res.sendRedirect("login.html");
          }
      }
    after: |
      import javax.servlet.http.HttpServletResponse;
      import javax.servlet.http.HttpServletRequest;
      import javax.servlet.http.HttpSession;

      class Foo {
          void logOut(HttpServletRequest req, HttpServletResponse res) {
              HttpSession session = req.getSession(false);
              req.logout();
              res.sendRedirect("login.html");
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.javax.JavaxLangModelUtil
examples:
- description: ''
  sources:
  - before: |
      import javax.lang.model.util.AbstractAnnotationValueVisitor6;

      abstract class Test extends AbstractAnnotationValueVisitor6 {}
    after: |
      import javax.lang.model.util.AbstractAnnotationValueVisitor9;

      abstract class Test extends AbstractAnnotationValueVisitor9 {}
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.javax.JavaxManagementMonitorAPIs
examples:
- description: ''
  sources:
  - before: |
      import javax.management.monitor.CounterMonitor;

      public class Test {
          public void method() {
              CounterMonitor monitor = new CounterMonitor();
              monitor.setThreshold(10);
          }
      }
    after: |
      import javax.management.monitor.CounterMonitor;

      public class Test {
          public void method() {
              CounterMonitor monitor = new CounterMonitor();
              monitor.setInitThreshold(10);
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.javax.JavaxXmlStreamAPIs
examples:
- description: ''
  sources:
  - before: |
      import javax.xml.stream.XMLEventFactory;

      public class Test {
          public void method() {
              XMLEventFactory eventFactory = XMLEventFactory.newInstance("test", Test.class.getClassLoader());
          }
      }
    after: |
      import javax.xml.stream.XMLEventFactory;

      public class Test {
          public void method() {
              XMLEventFactory eventFactory = XMLEventFactory.newFactory("test", Test.class.getClassLoader());
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.javax.RemoveEmbeddableId
examples:
- description: ''
  sources:
  - before: |
      import javax.persistence.Embeddable;
      import javax.persistence.Id;

      @Embeddable
      public class EmbeddableObject {
          @Id
          private int field;
      }
    after: |
      import javax.persistence.Embeddable;

      @Embeddable
      public class EmbeddableObject {
          private int field;
      }
    language: java
  - before: |
      import javax.persistence.EmbeddedId;
      import javax.persistence.Entity;

      @Entity
      public class MainEntity {
         @EmbeddedId
         private EmbeddableObject eo;
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.javax.RemoveTemporalAnnotation
examples:
- description: ''
  sources:
  - before: |
      import javax.persistence.Temporal;
      import javax.persistence.TemporalType;
      import java.sql.Date;
      import java.sql.Time;
      import java.sql.Timestamp;

      public class TemporalDates {
          @Temporal(TemporalType.DATE)
          private Date dateDate;

          @Temporal(TemporalType.TIME)
          private Date dateTime;

          @Temporal(TemporalType.DATE)
          private Time timeDate;

          @Temporal(TemporalType.TIME)
          private java.sql.Time timeTime;

          @Temporal(TemporalType.TIMESTAMP)
          private java.sql.Time timeTimestamp;

          @Temporal(TemporalType.TIMESTAMP)
          private java.sql.Timestamp timestampTimestamp;
      }
    after: |
      import javax.persistence.Temporal;
      import javax.persistence.TemporalType;
      import java.sql.Date;
      import java.sql.Time;
      import java.sql.Timestamp;

      public class TemporalDates {
          private Date dateDate;

          private Date dateTime;

          private Time timeDate;

          private java.sql.Time timeTime;

          private java.sql.Time timeTimestamp;

          private java.sql.Timestamp timestampTimestamp;
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.javax.UseJoinColumnForMapping
examples:
- description: ''
  sources:
  - before: |
      import javax.persistence.Entity;
      import javax.persistence.Column;
      import javax.persistence.Id;
      import javax.persistence.ManyToOne;

      @Entity
      public class TransactionEntity {
          @Id
          private int id;

          private long transactionNumber;
          private double amount;

          @ManyToOne
          @Column(name="account")
          private Account account;
      }
    after: |
      import javax.persistence.Entity;
      import javax.persistence.Id;
      import javax.persistence.JoinColumn;
      import javax.persistence.ManyToOne;

      @Entity
      public class TransactionEntity {
          @Id
          private int id;

          private long transactionNumber;
          private double amount;

          @ManyToOne
          @JoinColumn(name="account")
          private Account account;
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.joda.JodaTimeRecipe
examples:
- description: ''
  sources:
  - before: |
      import org.joda.time.DateTime;

      class A {
          public void foo() {
              DateTime dt = new DateTime();
              System.out.println(dt.toDateTime());
          }
      }
    after: |
      import java.time.ZonedDateTime;

      class A {
          public void foo() {
              ZonedDateTime dt = ZonedDateTime.now();
              System.out.println(dt);
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.joda.NoJodaTime
examples:
- description: ''
  sources:
  - before: |
      import org.joda.time.DateTime;
      import org.joda.time.Interval;

      class A {
          void foo() {
              DateTime dt = new DateTime();
              DateTime dt1 = new DateTime().plusDays(1);
              Interval i = new Interval(dt, dt1);
              System.out.println(i.toDuration());
          }
      }
    after: |
      import org.threeten.extra.Interval;

      import java.time.ZonedDateTime;

      class A {
          void foo() {
              ZonedDateTime dt = ZonedDateTime.now();
              ZonedDateTime dt1 = ZonedDateTime.now().plusDays(1);
              Interval i = Interval.of(dt.toInstant(), dt1.toInstant());
              System.out.println(i.toDuration());
          }
      }
    language: java
  - before: foo
    language: mavenProject
  - before: |
      <project>
          <modelVersion>4.0.0</modelVersion>
          <groupId>com.example.foobar</groupId>
          <artifactId>foobar-core</artifactId>
          <version>1.0.0</version>
          <dependencies>
              <dependency>
                  <groupId>joda-time</groupId>
                  <artifactId>joda-time</artifactId>
                  <version>2.12.3</version>
              </dependency>
          </dependencies>
      </project>
    after: |
      <project>
          <modelVersion>4.0.0</modelVersion>
          <groupId>com.example.foobar</groupId>
          <artifactId>foobar-core</artifactId>
          <version>1.0.0</version>
          <dependencies>
              <dependency>
                  <groupId>joda-time</groupId>
                  <artifactId>joda-time</artifactId>
                  <version>2.12.3</version>
              </dependency>
              <dependency>
                  <groupId>org.threeten</groupId>
                  <artifactId>threeten-extra</artifactId>
                  <version>1.8.0</version>
              </dependency>
          </dependencies>
      </project>
    path: pom.xml
    language: xml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.lang.ExplicitRecordImport
examples:
- description: ''
  sources:
  - before: |
      package com.acme.music;

      public class Test {
          Record record;
      }
    after: |
      package com.acme.music;

      import com.acme.music.Record;

      public class Test {
          Record record;
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.lang.JavaLangAPIs
examples:
- description: ''
  sources:
  - before: |
      package com.abc;

      class A {
         public void test() {
             boolean result = Character.isJavaLetter('b');
         }
      }
    after: |
      package com.abc;

      class A {
         public void test() {
             boolean result = Character.isJavaIdentifierStart('b');
         }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.lang.MigrateClassLoaderDefineClass
examples:
- description: ''
  sources:
  - before: |
      package org.openrewrite;

      class Test extends ClassLoader {
          public void method() {
              byte[] b = new byte[]{};
              super.defineClass(b, 10, 10);
          }
      }
    after: |
      package org.openrewrite;

      class Test extends ClassLoader {
          public void method() {
              byte[] b = new byte[]{};
              super.defineClass(null, b, 10, 10);
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.lang.MigrateClassNewInstanceToGetDeclaredConstructorNewInstance
examples:
- description: ''
  sources:
  - before: |
      package com.abc;

      class A {
         public void test() throws Throwable {
             Class<?> class_ = Class.forName("org.openrewrite.Test");
             class_.newInstance();
         }
      }
    after: |
      package com.abc;

      class A {
         public void test() throws Throwable {
             Class<?> class_ = Class.forName("org.openrewrite.Test");
             class_.getDeclaredConstructor().newInstance();
         }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.lang.MigrateSecurityManagerMulticast
examples:
- description: ''
  sources:
  - before: |
      package org.openrewrite;

      import java.net.InetAddress;
      import java.lang.SecurityManager;

      class Test {
          public void method() {
              InetAddress maddr = InetAddress.getByName("127.0.0.1");
              byte b = 100;
              new SecurityManager().checkMulticast(maddr, b);
          }
      }
    after: |
      package org.openrewrite;

      import java.net.InetAddress;
      import java.lang.SecurityManager;

      class Test {
          public void method() {
              InetAddress maddr = InetAddress.getByName("127.0.0.1");
              byte b = 100;
              new SecurityManager().checkMulticast(maddr);
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.lang.StringRulesRecipes
examples:
- description: ''
  sources:
  - before: |
      class Test {
          String s1 = "hello".substring(0, "hello".length());
          String s2 = "hello".substring(0);
      }
    after: |
      class Test {
          String s1 = "hello";
          String s2 = "hello";
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.lang.ThreadStopUnsupported
examples:
- description: ''
  sources:
  - before: |
      class Foo {
          void bar() {
              Thread.currentThread().stop();
          }
      }
    after: |
      class Foo {
          void bar() {
              /*
               * `Thread.stop()` always throws a `new UnsupportedOperationException()` in Java 21+.
               * For detailed migration instructions see the migration guide available at
               * https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/doc-files/threadPrimitiveDeprecation.html
               */
              Thread.currentThread().stop();
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.lang.UseStringIsEmptyRecipe
examples:
- description: ''
  sources:
  - before: |
      class Test {
          void m(String s) {
              boolean b = s.length() > 0;
              boolean c = 0 < s.length();
              boolean d = 0 != s.length();
              boolean e = s.length() != 0;
              boolean f = (s + "!").length() != 0;
          }
      }
    after: |
      class Test {
          void m(String s) {
              boolean b = !s.isEmpty();
              boolean c = !s.isEmpty();
              boolean d = !s.isEmpty();
              boolean e = !s.isEmpty();
              boolean f = !(s + "!").isEmpty();
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.lang.UseTextBlocks
examples:
- description: ''
  sources:
  - before: |
      class Test {
          String query = "SELECT * FROM\n" +
                  "my_table\n" +
                  "WHERE something = 1;";
      }
    after: |
      class Test {
          String query = """
                  SELECT * FROM
                  my_table
                  WHERE something = 1;\
                  """;
      }
    language: java
- description: ''
  sources:
  - before: |
      class A {
          void welcome() {
              log("\n========================================================="
                  + "\n                                                         "
                  + "\n          Welcome to Spring Integration!                 "
                  + "\n                                                         "
                  + "\n    For more information please visit:                   "
                  + "\n    https://www.springsource.org/spring-integration      "
                  + "\n                                                         "
                  + "\n=========================================================");
          }
          void log(String s) {}
      }
    after: "class A {\n    void welcome() {\n        log(\"\"\"\n            \n  \
      \          =========================================================\n     \
      \                                                               \\s\n      \
      \                Welcome to Spring Integration!                \\s\n       \
      \                                                             \\s\n        \
      \        For more information please visit:                  \\s\n         \
      \       https://www.springsource.org/spring-integration     \\s\n          \
      \                                                          \\s\n           \
      \ =========================================================\\\n            \"\
      \"\");\n    }\n    void log(String s) {}\n}\n"
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.lang.UseVar
examples:
- description: ''
  sources:
  - before: |
      package com.example.app;

      class A {
        void m() {
            String str = "I am a value";
        }
      }
    after: |
      package com.example.app;

      class A {
        void m() {
            var str = "I am a value";
        }
      }
    language: java
- description: ''
  sources:
  - before: |
      package com.example.app;

      import java.util.List;
      import java.util.ArrayList;

      class A {
        void m() {
            List<String> strs = new ArrayList<>();
        }
      }
    after: |
      package com.example.app;

      import java.util.ArrayList;

      class A {
        void m() {
            var strs = new ArrayList<String>();
        }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.lang.var.UseVarForGenericMethodInvocations
examples:
- description: ''
  sources:
  - before: |
      package com.example.app;

      import java.util.List;

      class A {
        void m() {
            List<String> strs = List.of("one", "two");
        }
      }
    after: |
      package com.example.app;

      import java.util.List;

      class A {
        void m() {
            var strs = List.of("one", "two");
        }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.lang.var.UseVarForGenericsConstructors
examples:
- description: ''
  sources:
  - before: |
      package com.example.app;

      import java.util.List;
      import java.util.ArrayList;

      class A {
        void m() {
            List<String> strs = new ArrayList<>();
        }
      }
    after: |
      package com.example.app;

      import java.util.ArrayList;

      class A {
        void m() {
            var strs = new ArrayList<String>();
        }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.lang.var.UseVarForObject
examples:
- description: ''
  sources:
  - before: |
      package com.example.app;

      class A {
        void m() {
            Object o = new Object();
        }
      }
    after: |
      package com.example.app;

      class A {
        void m() {
            var o = new Object();
        }
      }
    language: java
- description: ''
  sources:
  - before: |
      class A {
        void m() {
            final Object o = new Object();
        }
      }
    after: |
      class A {
        void m() {
            final var o = new Object();
        }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.lang.var.UseVarForPrimitive
examples:
- description: ''
  sources:
  - before: |
      package com.example.app;

      class A {
        void m() {
            char ch = '�';
        }
      }
    after: |
      package com.example.app;

      class A {
        void m() {
            var ch = '�';
        }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.logging.JavaLoggingAPIs
examples:
- description: ''
  sources:
  - before: |
      import java.util.logging.LoggingMXBean;

      class Test {
          static void method() {
              LoggingMXBean loggingBean = null;
          }
      }
    after: |
      import java.lang.management.PlatformLoggingMXBean;

      class Test {
          static void method() {
              PlatformLoggingMXBean loggingBean = null;
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.logging.MigrateGetLoggingMXBeanToGetPlatformMXBean
examples:
- description: ''
  sources:
  - before: |
      import java.util.logging.LoggingMXBean;
      import java.util.logging.LogManager;

      class Test {
          static void method() {
              LoggingMXBean loggingBean = LogManager.getLoggingMXBean();
          }
      }
    after: |
      import java.lang.management.ManagementFactory;
      import java.lang.management.PlatformLoggingMXBean;

      class Test {
          static void method() {
              PlatformLoggingMXBean loggingBean = ManagementFactory.getPlatformMXBean(PlatformLoggingMXBean.class);
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.logging.MigrateLogRecordSetMillisToSetInstant
examples:
- description: ''
  sources:
  - before: |
      package org.openrewrite.example;

      import java.util.logging.Level;
      import java.util.logging.LogRecord;

      public class Test {
          public static void method(long millis) {
              LogRecord logRecord = new LogRecord(Level.parse("0"), "msg");
              logRecord.setMillis(millis);
          }
      }
    after: |
      package org.openrewrite.example;

      import java.time.Instant;
      import java.util.logging.Level;
      import java.util.logging.LogRecord;

      public class Test {
          public static void method(long millis) {
              LogRecord logRecord = new LogRecord(Level.parse("0"), "msg");
              logRecord.setInstant(Instant.ofEpochMilli(millis));
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.logging.MigrateLoggerGlobalToGetGlobal
examples:
- description: ''
  sources:
  - before: |
      package org.openrewrite.example;

      import java.util.logging.Logger;

      public class Test {
          public static void method() {
              Logger logger = Logger.global;
          }
      }
    after: |
      package org.openrewrite.example;

      import java.util.logging.Logger;

      public class Test {
          public static void method() {
              Logger logger = Logger.getGlobal();
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.logging.MigrateLoggerLogrbToUseResourceBundle
examples:
- description: ''
  sources:
  - before: |
      package org.openrewrite.example;

      import java.util.logging.Level;
      import java.util.logging.Logger;

      public class Test {
          Logger logger = Logger.getLogger("myLogger");

          public void method() {
              logger.logrb(Level.parse("0"), "sourceClass", "sourceMethod", "bundleName", "msg");
          }
      }
    after: |
      package org.openrewrite.example;

      import java.util.ResourceBundle;
      import java.util.logging.Level;
      import java.util.logging.Logger;

      public class Test {
          Logger logger = Logger.getLogger("myLogger");

          public void method() {
              logger.logrb(Level.parse("0"), "sourceClass", "sourceMethod", ResourceBundle.getBundle("bundleName"), "msg");
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.lombok.AdoptLombokGetterMethodNames
examples:
- description: ''
  sources:
  - before: |
      class A {
          int foo = 9;
          int giveFoo() { return foo; }
      }
    after: |
      class A {
          int foo = 9;
          int getFoo() { return foo; }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.lombok.LombokBestPractices
examples:
- description: ''
  sources:
  - before: |
      <project>
          <modelVersion>4.0.0</modelVersion>
          <groupId>com.example</groupId>
          <artifactId>example</artifactId>
          <version>1.0.0</version>
          <dependencies>
              <dependency>
                  <groupId>org.projectlombok</groupId>
                  <artifactId>lombok</artifactId>
                  <version>1.18.6</version>
              </dependency>
              <dependency>
                  <groupId>org.projectlombok</groupId>
                  <artifactId>lombok-mapstruct-binding</artifactId>
                  <version>0.2.0</version>
              </dependency>
          </dependencies>
      </project>
    path: pom.xml
    language: xml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.lombok.LombokValToFinalVar
examples:
- description: ''
  sources:
  - before: |
      import lombok.val;
      class A {
          void bar() {
              val foo = "foo";
          }
      }
    after: |
      class A {
          void bar() {
              final var foo = "foo";
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.lombok.LombokValueToRecord
examples:
- description: ''
  parameters:
  - 'false'
  sources:
  - before: |
      package example;

      import lombok.Value;

      @Value
      public class A {
         String test;
      }
    after: |
      package example;

      public record A(
         String test) {
      }
    language: java
  - before: |
      package example;

      public class UserOfA {

          private final A record;

          public UserOfA() {
              this.record = new A("some value");
          }

          public String getRecordValue() {
              return record.getTest();
          }
      }
    after: |
      package example;

      public class UserOfA {

          private final A record;

          public UserOfA() {
              this.record = new A("some value");
          }

          public String getRecordValue() {
              return record.test();
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.lombok.UseLombokGetter
examples:
- description: ''
  sources:
  - before: |
      class A {

          int foo = 9;

          public int getFoo() {
              return foo;
          }
      }
    after: |
      import lombok.Getter;

      class A {

          @Getter
          int foo = 9;
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.lombok.UseLombokSetter
examples:
- description: ''
  sources:
  - before: |
      class A {

          int foo = 9;

          public void setFoo(int foo) {
              this.foo = foo;
          }
      }
    after: |
      import lombok.Setter;

      class A {

          @Setter
          int foo = 9;
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.lombok.UseNoArgsConstructor
examples:
- description: ''
  sources:
  - before: |
      class A {
          public A() {}
      }
    after: |
      import lombok.NoArgsConstructor;

      @NoArgsConstructor
      class A {
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.lombok.log.UseLombokLogAnnotations
examples:
- description: ''
  sources:
  - before: |
      class A {
          private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(A.class);
      }
    after: |
      import lombok.extern.slf4j.Slf4j;

      @Slf4j
      class A {
      }
    language: java
  - before: |
      import java.util.logging.Logger;
      class C {
          private static final Logger log = Logger.getLogger(C.class.getName());
      }
    after: |
      import lombok.extern.java.Log;

      @Log
      class C {
      }
    language: java
  - before: |
      import org.apache.commons.logging.Log;
      import org.apache.commons.logging.LogFactory;
      class E {
          private static final Log log = LogFactory.getLog(E.class);
      }
    after: |
      import lombok.extern.apachecommons.CommonsLog;

      @CommonsLog
      class E {
      }
    language: java
  - before: |
      import org.apache.logging.log4j.Logger;
      import org.apache.logging.log4j.LogManager;
      class B {
          private static final Logger log = LogManager.getLogger(B.class);
      }
    after: |
      import lombok.extern.log4j.Log4j2;

      @Log4j2
      class B {
      }
    language: java
  - before: |
      import org.jboss.logging.Logger;
      class D {
          private static final Logger log = Logger.getLogger(D.class);
      }
    after: |
      import lombok.extern.jbosslog.JBossLog;

      @JBossLog
      class D {
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.lombok.log.UseSlf4j
examples:
- description: ''
  parameters:
  - 'null'
  sources:
  - before: |
      class A {
          private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(A.class);
      }
    after: |
      import lombok.extern.slf4j.Slf4j;

      @Slf4j
      class A {
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.maven.UpdateMavenProjectPropertyJavaVersion
examples:
- description: ''
  parameters:
  - '17'
  sources:
  - before: |
      <project>
          <groupId>com.example</groupId>
          <artifactId>foo</artifactId>
          <version>1.0.0</version>
          <modelVersion>4.0</modelVersion>
          <properties>
              <java.version>11</java.version>
              <jdk.version>11</jdk.version>
              <javaVersion>11</javaVersion>
              <jdkVersion>11</jdkVersion>
              <maven.compiler.source>11</maven.compiler.source>
              <maven.compiler.target>11</maven.compiler.target>
              <maven.compiler.release>11</maven.compiler.release>
              <release.version>11</release.version>
          </properties>
      </project>
    after: |
      <project>
          <groupId>com.example</groupId>
          <artifactId>foo</artifactId>
          <version>1.0.0</version>
          <modelVersion>4.0</modelVersion>
          <properties>
              <java.version>17</java.version>
              <jdk.version>17</jdk.version>
              <javaVersion>17</javaVersion>
              <jdkVersion>17</jdkVersion>
              <maven.compiler.source>17</maven.compiler.source>
              <maven.compiler.target>17</maven.compiler.target>
              <maven.compiler.release>17</maven.compiler.release>
              <release.version>17</release.version>
          </properties>
      </project>
    path: pom.xml
    language: xml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.maven.UseMavenCompilerPluginReleaseConfiguration
examples:
- description: ''
  parameters:
  - '11'
  sources:
  - before: |
      <?xml version="1.0" encoding="UTF-8"?>
      <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
        <modelVersion>4.0.0</modelVersion>
        <groupId>org.sample</groupId>
        <artifactId>sample</artifactId>
        <version>1.0.0</version>

        <build>
          <plugins>
            <plugin>
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-compiler-plugin</artifactId>
              <version>3.8.0</version>
              <configuration>
                <source>1.8</source>
                <target>1.8</target>
              </configuration>
            </plugin>
          </plugins>
        </build>

      </project>
    after: |
      <?xml version="1.0" encoding="UTF-8"?>
      <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
        <modelVersion>4.0.0</modelVersion>
        <groupId>org.sample</groupId>
        <artifactId>sample</artifactId>
        <version>1.0.0</version>

        <build>
          <plugins>
            <plugin>
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-compiler-plugin</artifactId>
              <version>3.8.0</version>
              <configuration>
                <release>11</release>
              </configuration>
            </plugin>
          </plugins>
        </build>

      </project>
    path: pom.xml
    language: xml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.metrics.SimplifyMicrometerMeterTags
examples:
- description: ''
  sources:
  - before: |
      import io.micrometer.core.instrument.*;
      class Test {
          Counter c = Counter.builder("counter")
              .tags(new String[] { "key", "value" })
              .register(Metrics.globalRegistry);
      }
    after: |
      import io.micrometer.core.instrument.*;
      class Test {
          Counter c = Counter.builder("counter")
              .tag("key", "value")
              .register(Metrics.globalRegistry);
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.net.JavaNetAPIs
examples:
- description: ''
  sources:
  - before: |
      package org.openrewrite.example;

      import java.net.MulticastSocket;

      public class Test {
          public static void method() {
              MulticastSocket s = new MulticastSocket(0);
              s.getTTL();
          }
      }
    after: |
      package org.openrewrite.example;

      import java.net.MulticastSocket;

      public class Test {
          public static void method() {
              MulticastSocket s = new MulticastSocket(0);
              s.getTimeToLive();
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.net.MigrateHttpURLConnectionHttpServerErrorToHttpInternalError
examples:
- description: ''
  sources:
  - before: |
      import java.net.HttpURLConnection;

      class Test {
          private static final int ERROR = HttpURLConnection.HTTP_SERVER_ERROR;

          public static int method() {
              return HttpURLConnection.HTTP_SERVER_ERROR;
          }
      }
    after: |
      import java.net.HttpURLConnection;

      class Test {
          private static final int ERROR = HttpURLConnection.HTTP_INTERNAL_ERROR;

          public static int method() {
              return HttpURLConnection.HTTP_INTERNAL_ERROR;
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.net.MigrateMulticastSocketSetTTLToSetTimeToLive
examples:
- description: ''
  sources:
  - before: |
      package org.openrewrite.example;

      import java.net.MulticastSocket;

      public class Test {
          public static void method() {
              MulticastSocket s = new MulticastSocket(0);
              s.setTTL((byte) 1);
          }
      }
    after: |
      package org.openrewrite.example;

      import java.net.MulticastSocket;

      public class Test {
          public static void method() {
              MulticastSocket s = new MulticastSocket(0);
              s.setTimeToLive(Byte.valueOf((byte) 1).intValue());
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.net.MigrateURLDecoderDecode
examples:
- description: ''
  sources:
  - before: |
      package org.openrewrite.example;

      import java.net.URLDecoder;

      class Test {
          public static void method(String url) {
              String message = URLDecoder.decode(url);
          }
      }
    after: |
      package org.openrewrite.example;

      import java.net.URLDecoder;
      import java.nio.charset.StandardCharsets;

      class Test {
          public static void method(String url) {
              String message = URLDecoder.decode(url, StandardCharsets.UTF_8);
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.net.MigrateURLEncoderEncode
examples:
- description: ''
  sources:
  - before: |
      package org.openrewrite.example;

      import java.net.URLEncoder;

      class Test {
          public static void method(String url) {
              String message = URLEncoder.encode(url);
          }
      }
    after: |
      package org.openrewrite.example;

      import java.net.URLEncoder;
      import java.nio.charset.StandardCharsets;

      class Test {
          public static void method(String url) {
              String message = URLEncoder.encode(url, StandardCharsets.UTF_8);
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.net.URLConstructorToURICreate
examples:
- description: ''
  sources:
  - before: |
      import java.net.URL;

      class Test {
          void urlConstructor(String spec) throws Exception {
              URL url1 = new URL(spec);
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.net.URLConstructorsToNewURI
examples:
- description: ''
  sources:
  - before: |
      import java.net.URL;

      class Test {
          void urlConstructor(String spec) throws Exception {
              URL url1 = new URL(spec);
              URL url2 = new URL(spec, "localhost", "file");
              URL url3 = new URL(spec, "localhost", 8080, "file");
          }
      }
    after: |
      import java.net.URI;
      import java.net.URL;

      class Test {
          void urlConstructor(String spec) throws Exception {
              URL url1 = new URL(spec);
              URL url2 = new URI(spec, null, "localhost", -1, "file", null, null).toURL();
              URL url3 = new URI(spec, null, "localhost", 8080, "file", null, null).toURL();
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.search.AboutJavaVersion
examples:
- description: ''
  parameters:
  - 'null'
  sources:
  - before: |
      class Test {
      }
    after: |
      /*~~(Java version: 11)~~>*/class Test {
      }
    language: java
  - before: |
      class Test2 {
      }
    after: |
      /*~~(Java version: 11)~~>*/class Test2 {
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.search.FindJavaVersion
examples:
- description: ''
  sources:
  - before: |
      class A {
      }
    language: java
  - before: |
      class B {
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.sql.MigrateDriverManagerSetLogStream
examples:
- description: ''
  sources:
  - before: |
      package org.openrewrite;

      import java.sql.DriverManager;

      class Test {
          public void method() {
              DriverManager.setLogStream(System.out);
          }
      }
    after: |
      package org.openrewrite;

      import java.sql.DriverManager;

      class Test {
          public void method() {
              DriverManager.setLogWriter(new java.io.PrintWriter(System.out));
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.util.IteratorNext
examples:
- description: ''
  sources:
  - before: |
      import java.util.*;

      class Foo {
          String bar(List<String> collection) {
              return collection.iterator().next();
          }
      }
    after: |
      import java.util.*;

      class Foo {
          String bar(List<String> collection) {
              return collection.getFirst();
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.util.MigrateCollectionsSingletonList
examples:
- description: ''
  sources:
  - before: |
      import java.util.*;

      class Test {
          List<String> list = Collections.singletonList("ABC");
      }
    after: |
      import java.util.List;

      class Test {
          List<String> list = List.of("ABC");
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.util.MigrateCollectionsSingletonSet
examples:
- description: ''
  sources:
  - before: |
      import java.util.*;

      class Test {
          Set<String> set = Collections.singleton("Hello");
      }
    after: |
      import java.util.Set;

      class Test {
          Set<String> set = Set.of("Hello");
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.util.OptionalStreamRecipe
examples:
- description: ''
  sources:
  - before: |
      import java.util.Optional;
      import java.util.stream.Stream;

      class Scratch {
        public void foo() {
          var x = Stream.of(Optional.empty())
               .filter(Optional::isPresent)
               .map(Optional::get);
        }
      }
    after: |
      import java.util.Optional;
      import java.util.stream.Stream;

      class Scratch {
        public void foo() {
          var x = Stream.of(Optional.empty())
               .flatMap(Optional::stream);
        }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.util.RemoveFinalizerFromZip
examples:
- description: ''
  sources:
  - before: |
      import java.util.zip.Inflater;

      class FooInflater extends Inflater {
          public void test() {
              FooInflater obj = new FooInflater();
              obj.finalize();
          }
      }
    after: |
      import java.util.zip.Inflater;

      class FooInflater extends Inflater {
          public void test() {
              FooInflater obj = new FooInflater();
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.util.ReplaceMathRandomWithThreadLocalRandomRecipe
examples:
- description: ''
  sources:
  - before: |
      class Example {
          double test() {
              return Math.random();
          }
      }
    after: |
      import java.util.concurrent.ThreadLocalRandom;

      class Example {
          double test() {
              return ThreadLocalRandom.current().nextDouble();
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.util.ReplaceStreamCollectWithToList
examples:
- description: ''
  parameters:
  - 'false'
  sources:
  - before: |
      import java.util.stream.Collectors;
      import java.util.stream.Stream;
      import java.util.List;

      class Example {
          List<String> test(Stream<String> stream) {
              return stream.collect(Collectors.toUnmodifiableList());
          }
      }
    after: |
      import java.util.stream.Stream;
      import java.util.List;

      class Example {
          List<String> test(Stream<String> stream) {
              return stream.toList();
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.util.StreamFindFirst
examples:
- description: ''
  sources:
  - before: |
      import java.util.*;

      class Foo {
          void bar(SequencedCollection<String> collection) {
              String first = collection.stream().findFirst().orElseThrow();
          }
      }
    after: |
      import java.util.*;

      class Foo {
          void bar(SequencedCollection<String> collection) {
              String first = collection.getFirst();
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.migrate.util.UseMapOf
examples:
- description: ''
  sources:
  - before: |
      import java.util.HashMap;
      import java.util.Map;

      class Test {
          Map<String, String> m = new HashMap<>() {{
              put("stru", "menta");
              put("mod", "erne");
          }};
      }
    after: |
      import java.util.Map;

      class Test {
          Map<String, String> m = Map.of("stru", "menta", "mod", "erne");
      }
    language: java
